#ClipboardTimeout ms\nUSE: Amount of time to wait for clipboard access after first attempt fails.\nMS: N = Time in to wait in ms\n   -1 = Try indefinitely\n    0 = Try once\nEX: #ClipboardTimeout 50
#ErrorStdOut   \nUSE: Syntax errors that prevent a script from launching are sent to StdErr\n    rather than displaying a dialog.
#HotkeyInterval Num   \nUSE: Used to detect hotkey spam and generate a warning dialog.\nNUM: Time in ms. Default = 2000.\nREMARK: This setting provides the "Interval" for #MaxHotkeysPerInterval.\nEX: #HotkeyInterval 1500
#HotkeyModifierTimeout Num   \nUSE: Affects behavior of the Ctrl | Alt | Shift | Win modifiers.\nNUM: -1 .. N\n    -1 = Try indefinitely    0  = Try once\n     N = Any time in ms to wait\nEX: #HotkeyModifierTimeout 50
#Hotstring NoMouse | EndChars Str | Options   \nUSE: Sets default options | end characters for all following hotstrings.\nNOMOUSE: Mouse clicks do not reset the hotstring recognizer.\nENDCHARS: Characters in Str will activate end of hotstring.\nOPTIONS: Set the default options of future hotstrings. Space separated.\n    * = Fires on match      ? = Each keystroke starts a new hotkey check\n    C = Case sensitive      B = Backspaces hotstring text before sending\n    R = Use {Raw} Send      O = End character is not sent\n    T = Use {Text} Send     C1 = Hotstring does not conform to typed case\n    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event\n    Kn = N key delay|N key duration in ms for SE|SP\n    X = Inline hotstring will treat text after it as a command\n    Z = Reset hotstring recognizer after a hotstring fires\n    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.\nREMARK: Hotstring() can be used instead of these directives.\nEX: #Hotstring Options * ? O R
#If [Expression]   \nUSE: Creates context-sensitive hotkeys and hotstrings based on an expression.\nREMARK: A blank #If sets hotkeys back to global mode.\nEX: #If GetKeyState("CapsLock", "P")
#IfTimeout Num   \nUSE: Set the maximum time an #If directive can evaluate an expression.\nNUM: Time in ms.\nEX: #IfTimeout 100
#IfWinActive [WinTitle, WinText]   \nUSE: Hotkeys following this only work if the active window matches.\nWINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A\nREMARK: #If WinActive() is more flexible. WinTitle A = Use active window.\nEX: #IfWinActive, ahk_exe notepad.exe
#IfWinExist [WinTitle, WinText]   \nUSE: Hotkeys following this only work if a window exists that matches.\nWINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A\nREMARK: #If WinExist() is more flexible. WinTitle A = Use active window.\nEX: #IfWinExist, ahk_exe calc.exe
#IfWinNotActive [WinTitle, WinText]   \nUSE: Hotkeys following this only work if the active window does not match.\nWINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A\nREMARK: #If !WinActive() is more flexible. WinTitle A = Use active window.\nEX: #IfWinNotActive, ahk_exe notepad.exe
#IfWinNotExist [WinTitle, WinText]   \nUSE: Hotkeys following this only work if the no existing window matches.\nWINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A\nREMARK: #If !WinExist() is more flexible. WinTitle A = Use active window.\nEX: #IfWinNotExist, ahk_exe calc.exe
#Include Path   \nUSE: Import a file or set working directory for #Include/FileInstall\nPATH: Path\\File.ahk = Import AHK file    LibraryName = A library file/function.\n      Directory = Changes working dir for #Include/#IncludeAgain/FileInstall.\nREMARK: Path cannot contain double quotes, wildcards, or non-built-in variables.
#IncludeAgain Path   \nUSE: Import a file or set working directory for #Include/FileInstall\nPATH: Path\\File.ahk = Import AHK file    LibraryName = A library file/function.\n      Directory = Changes working dir for #Include/#IncludeAgain/FileInstall.\nREMARK: Path cannot contain double quotes, wildcards, or non-built-in variables.\n        #IncludeAgain, unlike #Include, allows multiple loads of the same file.
#InputLevel [Num]   \nUSE: Set artificial keyboard and mouse event interrupt levels.\nNUM: 0 .. 100\nREMARK: Omitting a number = 0. See SendLevel docs for more info.\nEX: #InputLevel 5
#InstallKeybdHook   \nUSE: Forces the unconditional installation of the keyboard hook.
#InstallMouseHook   \nUSE: Forces the unconditional installation of the mouse hook.
#KeyHistory Num   \nUSE: Set maximum number of keyboard & mouse events in KeyHistory window.\nNUM: 0 .. 500\n    0 = Disable all key history    40  = Default    500 = Max
#LTrim [OFF]   \nUSE: Trims tabs and spaces from the beginning and end of traditional strings.\n    Primarily used to allow continuation sections to be indented.\nOFF: Disables LTrim. Leaving this blank enables LTrim.\nEX: #LTrim Off
#MaxHotkeysPerInterval Num   \nUSE: Send a warning if more than Num hotkeys are sent within #HotkeyInterval's time.\nNUM: Hotkey limit per interval.\nREMARK: The interval time is set by #HotkeyInterval\nEX: #MaxHotkeysPerInterval 70
#MaxMem Num   \nUSE: Sets the maximum capacity of each variable to Num in megabytes.\nNUM: 1 .. 4095 in megabytes\n    Numbers under 1 default to 1 and over 4095 default to 4095.\nEX: #MaxMem 2048
#MaxThreads Num   \nUSE: Sets the maximum number of simultaneous threads.\nNUM: Between 1 and 255. A number over 255 defaults to 255.\nEX: #MaxThreads Num
#MaxThreadsBuffer Value   \nUSE: When the #MaxThreadsPerHotkey limit is reached, allow hotkey buffering.\nVALUE: On = Hotkeys are buffered    Off = Hotkeys are ignored\nEX: #MaxThreadsBuffer Off
#MaxThreadsPerHotkey Num   \nUSE: Set the maximum number of simultaneous threads per hotkey | hotstring.\nNUM: 1 .. 255\nEX: #MaxThreadsPerHotkey 100
#MenuMaskKey Str   \nUSE: Change which key is used to mask Win or Alt key-up events.\nSTR: A key name, virtual key, or scan code.\nREMARK: vk07 and vkFF are good candidates as they do nothing.\nEX: #MenuMaskKey vkFF
#NoEnv   \nUSE: Avoids checking empty variables to see if they are environment variables.\nREMARK: Increases performance. Recommended for new scripts. This is a default in v2.
#NoTrayIcon   \nUSE: Disables showing of the tray icon.\nREMARK: Re-enable tray icon with the command:\n    Menu, Tray, Icon
#Persistent   \nUSE: Keeps a script running until ExitApp is reached.\nREMARK: This is inferred if the script contains any of the following:\n    Hotkey    Hotstring    OnMessage()    GUI
#Requires   \nUSE: Displays an error and quits if a version requirement is not met.\nREMARK: If this begins with the word "AutoHotkey" followed by a space or tab, it should be followed by a version string with optional leading "v".
#SingleInstance Value   \nUSE: Controls whether multiple instances of a script can run simultaneously.\nVALUE: Off = Default. Allows multiple instances of a script to run\n    Force  = Force closes old script and opens a new instance\n    Ignore = Script will not launch if an instance of it is running\nEX: #SingleInstance Force
#UseHook Value   \nUSE: Forces the use of the hook to implement all | some keyboard hotkeys.\nVALUE: On = Force hook use    Off = Hook is not used\nEX: #UseHook On
#Warn [Type, Mode]   \nUSE: Control if warnings are shown for specific errors.\nTYPE: If left BLANK, it defaults to All.\n    UseUnsetLocal = Warn if a local variable is read before being declared\n    UseUnsetGlobal = Warn if a global variable is read before being declared\n    UseEnv = Warn if a blank variable inherits an environmental var\n    LocalSameAsGlobal = Warn if a global & local variable share a name\n    ClassOverwrite = Warn if a variable replaces a class\n    All = Include all warnings\nMODE: Warning notification method. BLANK uses MsgBox.\n    MsgBox = Warning is sent to a message box.\n    StdOut = Warning, filename and line number are sent to StdOut.\n    OutputDebug = Warning is sent to the debugger for display.\n    Off = Disable warnings of the given Type.\nEX: #Warn All MsgBox
#WinActivateForce   \nUSE: Window activation uses a more forceful method.\nREMARK: Affects: WinActivate|WinActivateBottom|GroupActivate

Abs(Num)   \nUSE: Math func. the converts Num to an absolute value.\nRETURN: Number. Integer|Float is dependent on input Number.\nEX: Abs(-12.0) ;R=> 12.0
ACos(Num)   \nUSE: Math func. Returns the arccosine of Num.\nRETURN: Number. In radians. -1 .. 1\n    BLANK = Number is out of range.\nEX: ACos(0.2) ;R=> 1.369438
Array(Item1, Item2, ..., ItemN)   \nUSE: An object that stores data in sequentially numbered indexes.\nRETURN: Object. Numbered array.\nMETHODS: All objects have access to these methods:\n    .Clone()    .MaxIndex()    .InsertAt()    .GetAddress()\n    .Count()    .MinIndex()    .RemoveAt()    .GetCapacity()\n    .Pop()      .Delete()      ._NewEnum()    .SetCapacity()\n    .Push()     .Length()      .HasKey()\nEX: arr := Array("Dog","Cat","Bird","Ape") ; Create an array
Asc(Str)   \nUSE: Returns the numeric code of the first character in Str.\nRETURN: Number. 0 = BLANK Str\nREMARK: Only returns the number for the first character in the String.\nEX: Asc("t") ;R=> 116
ASin(Num)   \nUSE: Math func. Returns the arcsine of Num.\nRETURN: Number. In radians. -1 .. 1\n    BLANK = Number out of range.\nEX: ASin(0.2) ;R=> 0.201358
ATan(Num)   \nUSE: Math func. Returns the arctangent of Number.\nRETURN: Number. In radians.\nEX: ATan(1.2) ;R=> 0.876058
Ceil(Num)   \nUSE: Math func. Returns Num rounded up.\nRETURN: Number.\nEX: Ceil(8.01) ;R=> 9
Chr(Num)   \nUSE: Get the character for the provided Number code.\nRETURN: String. Range depends on ANSI or Unicode:\n    ANSI = 0 .. 255    Unicode = 0x0 .. 0x10FFFF\nREMARK: Codes over 127|0x7F depend on encoding or AHK exe type.\nEX: Chr(0x2B) ;R=> +
ComObjActive(CLSID)   \nUSE: Retrieves a running object that has been registered with OLE.\nRETURN: Object. COM.\nEX: ComObject := ComObjActive("21ec2020-3aea-1069-a2dd-08002b30309d")
ComObjArray(ComType, Count1 , ... , Count8)   \nUSE: Creates a SafeArray for use with COM.\nCOMTYPE: Any COM variant type except: VT_ARRAY|VT_BYREF|VT_EMPTY|VT_NULL\nCOUNT: Size of each dimension. 1 .. 8\nRETURN: Object. SafeArray.\nMETHODS: Methods available to this array:\n    Array.MaxIndex(dimensionN)    Array.Clone()\n    Array.MinIndex(dimensionN)    Array._NewEnum()\nEX: ComObjArray(VT_VARIANT:=12, 3)
ComObjConnect(ComObject, [Prefix:=""])   \nUSE: Connects the object's event sources to functions with a given prefix.\nPREFIX: Name to prefix event handlers with. If omitted, ComObject is disconnected.\nREMARK: Event-handlers should be named: PrefixnameEventname()\nEX: ComObjConnect(comObj, "Event_") ; comObj's events are connected to\n                                    ; functions with an Event_ prefix.
ComObjCreate(CLSID, [IID:=""])   \nUSE: Creates a COM object.\nRETURN: Object. COM.\nEX: ie := ComObjCreate("InternetExplorer.Application") ; Create an IE COM
ComObject(Type, Int|Pointer, [Flag:=""])   \nUSE: Creates an object to be used as a parameter or return value.\n    This object represents a COM variant type.\nTYPE: Com Object variation type. For a list, see: Cheat_Variant_Type\nFLAGS: Affects interface reference counting. See docs.\n    0 = AddRef is called    1 = AddRef is not called\nRETURN: Object.\nEX: ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
ComObjError([Value:=""])   \nUSE: Enable or disable notification of COM errors.\nVALUE: 1 = On    0 = Off\nRETURN: String. Settings before Value was applied.\nEX: comObjErrorSetting := ComObjError() ; Stores current setting
ComObjFlags(ComObject, [Flag:="", Mask:=""])   \nUSE: Set|get the flags which control a COM wrapper object's behavior.\nFLAG: F_OWNVALUE = SafeArray is destroyed when wrapper object is freed.\nMASK: Bitmask of flags. If omitted, flags are toggled.\nRETURN: String. Current flag settings of COM object.\nEX: ComObjFlags(SafeArr, -1) ; Sets F_OWNVALUE to false.
ComObjGet(Name)   \nUSE: Returns a reference to an object provided by a COM component.\nNAME: Object's display name.\nRETURN: Object. COM.\nEX: wmiCom := ComObjGet("winmgmts:") ; Gets WMI service object
ComObjQuery(ComObject, [SID:="",] IID)   \nUSE: Query a COM object for an interface or service.\nSID|IID: Service Identifier | Interface Identifier (GUID)\nRETURN: Handle.\nREMARK: Both use the format: {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n    If omitting SID, omit the comma.\nEX: pointer := ComObjQuery(comObj, "{B196B283-BAB4-101A-B69C-00AA00341D07}")
ComObjType(ComObject, [Type:=""])   \nUSE: Retrieves information from a COM object.\nREMARK: Return BLANK if a parameter is invalid or if type can't be retrieved.\nRETURN: Based on Type.\nTYPES: Information type to retrieve.\n    Get Variant Type:   vtNum := ComObjType(ComObject)\n    Get Interface Name: iName := ComObjType(ComObject, "Name")\n    Get GUID:            GUID := ComObjType(ComObject, "IID")\n    Get Class Name:     cName := ComObjType(ComObject, "Class")\n    Get Class GUID:     cGUID := ComObjType(ComObject, "CLSID")
ComObjValue(ComObject)   \nUSE: Retrieves the value or pointer stored in a COM wrapper object.\nRETURN: Number. 64-bit signed integer.
Cos(Num)   \nUSE: Math func. Returns the trigonometric cosine of Num.\nRETURN: Number. In radians.\nEX: Cos(1.2) ;R=> 0.362358
DllCall("[DllFile\\]Function", [Type1, Value1, ..., TypeN, ValueN, "CDecl Type"])   \nUSE: Call a function inside a DLL, such as a standard Windows API function.\nCDecl: Normally omitted as most functions use the standard calling convention.\nTYPE: Name & byte values. Ptr value is 32|64 bit. Str is ANSI|Unicode\n    Int  4    UInt  4    Int64 8    UInt64 8    Double 8\n    Char 1    UChar 1    Short 2    UShort 2    Float  4\n    WStr 2    Str 1|2    AStr  1    Ptr  4|8\nErrorLevel:\n    0 = Success                       -1 = DllFile\\Function error\n    -2 = Return|Arg invalid           -3 = DLL inaccessible or privilege too low\n    -4 = Function not found in DLL    1+ = Function called with fatal exception\n    A+n = Too many arguments          A-n = Too few arguments\nEX: DllCall("IsWindowVisible", "Ptr", WinActive("A")) ; Check if active window is visible.
Exception(Message, [What:="", Extra:=""])   \nUSE: Creates an object with properties for use with exceptions.\nMESSAGE: An error message or ErrorLevel.\nWHAT: Name of the function|label|command that was running.\nEXTRA: Any extra information that should be included.\nRETURN: Object. Properties: MESSAGE|EXEC|EXTRA|FILE|LINE\nREMARK: The FILE and LINE properties are generated automatically.\n    FILE    = Path to the script|file running at error time.\n    LINE    = Line number that was running at error time.\nEX: ExObj := Exception("Failed write", "FileAppend") ; Error writing exception
Exp(Num)   \nUSE: Returns e to the Num power.\nNUM: A positive or negative number.\nREMARK: e (Euler's number) is a mathematical constant. 2.71828...\nEX: Exp(1.2) ;R=> 3.320117
FileExist(Pattern)   \nUSE: Checks for the existence of a file or folder\nPATTERN: A path, filename, or pattern.\nRETURN: String. D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory     O = Offline     N = Normal     T = Temporary\n    C = Compressed    R = ReadOnly    A = Archive    S = System\n    H = Hidden        X = No Attr     BLANK = No file found\nEX: FileExist("C:\\Windows\\") ;R=> D
FileOpen(Filename, Flags, [Encoding:=A_FileEncoding])   \nUSE: Open a file.\nFILENAME: Path can be relative or absolute. For STD stream, use:\n    FileOpen("*", "w")  = StdOut    FileOpen("*", "r")  = StdIn\n    FileOpen("**", "w") = StdErr\nFLAGS: r = Read | w = Write | rw = ReadWrite | a = Append | h = Handle\nENCODING: UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn\nRETURN: Object. File Object. See: Cheat_Object_File\nREMARK: BLANK encoding defaults to what FileEncoding is set to.\nEX: FileOpen(A_ScriptFullPath, r)
Floor(Num)   \nUSE: Math func. Rounds Num down.\nEX: Floor(1.9) ;R=> 1
Format(FormStr, [i1, i2, ..., iN])   \nUSE: Format, convert, or pad any number of items.\nFORMSTR: String format that represents how the final data should look.\n    Format is "{1:Form}{2:Form}"\nFORM: Unspaced format: Flag [0]Width.Places ULT Type\n    FLAGS: -=Left align | SPACE=Prefix positive numbers with a space\n        #=Hex prefix/force decimal | +=Force +- number prefix\n    ULT: Case. UPPER lower Title\n    WIDTH: Ensures variable is padded that much. Prefix 0 to pad with zeroes.\n    PLACES: Max characters|digits|decimal places\n    TYPE: Int:d|i|u|x|X|o|p    Float:f|e|E|g|G|a|A    String:s    Code:c\nRETURN: String. Formatted.\nREMARK: Use {{} and {}} for literal curly braces.\nEX: MsgBox, % Format("|{2:Ts}{3:-7Us}|`n|{4:10Ls}|","","sci","te","4AHK")
Func(FuncName)   \nUSE: Retrieves a reference|handle to the specified function.\nRETURN: Object Reference. 0 = Function does not exist.\nEX: fn := Func("StrLen") ; Sets string length function to fn\n    MsgBox, % fn.Call("Test") ; Same as StrLen("Test")
GetKeyName(Key)   \nUSE: Return AHK's name for the provided key.\nKEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)\nRETURN: String.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeyName("vk" Format("{:x}",27)) ;R=> Escape
GetKeyVK(Key)   \nUSE: Return the vk (Virtual Key) for provided key.\nKEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)\nRETURN: Number. Decimal.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeyVK("Escape") ;R=> 27
GetKeySC(Key)   \nUSE: Return the sc (Scan Code) for the provided key.\nKEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)\nRETURN: Number. Decimal.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeySC("Escape") ;R=> 1
GetKeyState(Key, [Mode:=""])   \nUSE: Return the up|down|toggle state of a key, mouse button, or joy button.\nKEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)\nMODE: BLANK = Logical state    P = Physical state    T = Toggle state\nRETURN: Number. 1 = Down|toggle on    0 = Up|toggle off\nEX: GetKeyState("LButton", "P") ;R=> 1
GuiClose(HWND)   \nUSE: Launched when a GUI is closed. (GUI is hidden).\nRETURN: If a number > 0 is returned, GUI window is not hidden.\nREMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.\nEX: GuiClose(mainHWND){\n        ExitApp\n    }
GuiEscape(GuiHWND)   \nUSE: Launches when Escape is pressed in a GUI.\nREMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.\nEX: GuiEscape(GuiHWND){\n        MsgBox, % "You pressed the escape key!"\n    }
GuiSize(GuiHWND, EventInfo, Width, Height)   \nUSE: Launches when a GUI is resized|minimized|maximized|restored.\nWIDTH|HEIGHT: Stores the window's client width|height.\nREMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.\nErrorLevel|A_EVENTINFO: Both receive one of the following:\n    0=Restore|resize    1=Minimize    2=Maximize\nEX: GuiNamGuiSize(GuiHWND, EventInfo, Width, Height){\n        MsgBox, % "GUI Resized! Client area is now " height "x" width "."\n    }
GuiContextMenu(GuiHWND, CtrlHWND, EventInfo, RightClick, X, Y)   \nUSE: Launches when a context menu (like the right click menu) is detected.\nCTRLHWND: HWND of the control that received the event. BLANK if none.\nWIDTH|HEIGHT: Window's current client width|height.\nA_EVENTINFO: Contains additional info for ListBox|ListView|TreeView.\nX|Y: Coordinates of the event. Relative to window.\nRIGHTCLICK: True if right click launched the script.\nREMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.\nEX: GuiContextMenu(GuiHWND, CtrlHWND, EventInfo, RightClick, X, Y){\n        MsgBox, % "You right clicked at x" X "y:" Y\n    }
GuiDropFiles(GuiHWND, FileArray, CtrlHWND, X, Y)   \nUSE: Launches when a file is dragged & dropped onto a GUI.\nFILEARRAY: An numbered array of filenames.\nCTRLHWND: HWND of the control that received the event. BLANK if dropped on GUI.\nX|Y: Contains the drop location X and Y coordinates. Relative to the window.\nREMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.\n    To disable drag and drop, remove the GUI's WS_EX_ACCEPTFILES style.\nErrorLevel|A_EVENTINFO: Both receive the total number of files dropped.\nEX: GuiDropFiles(GuiHWND, FileArray, CtrlHWND, X, Y){\n        MsgBox, % "You provided " FileArray.Length() " files."\n    }
Hotstring( )   \nUSE: Create|modify|enables|disable a hotstring.\nVARIANTS:\n    Hotstring(Trigger, [Action, State]) = Make/Change hotstring\n    Hotstring(NewOptions)               = Set Default Options\n    Hotstring("EndChars", [Value])      = Set end characters\n    Hotstring("MouseReset", [Value])    = Mouse click|Hotstring behavior\n    Hotstring("Reset")                  = Hotstring recognizer reset
Hotstring(Trigger, [Action:="", State:=""])   \nUSE: Defines a hotstring.\nTRIGGER: Format:  :OPTIONS:PATTERN\nOPTIONS: Space separated list of options.\n    * = Fires on match      ? = Each keystroke starts a new hotkey check\n    C = Case sensitive      B = Backspaces hotstring text before sending\n    R = Use {Raw} Send      O = End character is not sent\n    T = Use {Text} Send     C1 = Hotstring does not conform to typed case\n    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event\n    Kn = N key delay|N key duration in ms for SE|SP\n    X = Inline hotstring will treat text after it as a command\n    Z = Reset hotstring recognizer after a hotstring fires\n    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.\nACTION: Replacement text. If X option, item to execute.\nSTATE: On|Off|Toggle\nEX: Hotstring(":*:rtm", " = ""Read The Manual!""", On)
Hotstring(Options)   \nUSE: Set the default options for all future hotstrings.\nOPTIONS: Space separated list of options.\n    * = Fires on match      ? = Each keystroke starts a new hotkey check\n    C = Case sensitive      B = Backspaces hotstring text before sending\n    R = Use {Raw} Send      O = End character is not sent\n    T = Use {Text} Send     C1 = Hotstring does not conform to typed case\n    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event\n    Kn = N key delay|N key duration in ms for SE|SP\n    X = Inline hotstring will treat text after it as a command\n    Z = Reset hotstring recognizer after a hotstring fires\n    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.\nEX: Hotstring("*?TCB0")
Hotstring("EndChars", [Value:="-()[]{}':;""/\\,.?!`n `t"])   \nUSE: Characters in Value will activate end of hotstring.\nVALUE: String of new characters.\nRETURN: String. Prior characters before Value was applied.\nREMARK: EndChars are irrelevant with the * option.\nEX: Hotstring("EndChars", "`t(") ; Only uses tab and open parentheses
Hotstring("MouseReset", [Value:=""])   \nUSE: Get or set the mouse reset setting for hotstrings.\nVALUE: 1 = Enable    0 = Disable\nRETURN: String. Setting before Value was applied.\nREMARK: Mouse hook may be installed if needed.\nEX: var := Hotstring("MouseReset") ; Get current MouseReset setting
Hotstring("Reset")   \nUSE: Resets the hotstring recognizer.\nREMARK: Hotstring recognizer assumes you've typed nothing so far.
IL_Add(IL_ID, Filename, [IconNum:=1, ResizeNonIcon:=0])   \nUSE: Add an icon or picture to the specified IL_ID.\nIL_ID: An Image List ID made by IL_Create()\nFILENAME: Path to an image file or a bitmap|icon handle.\nICONNUM: Icon group number. -Number = Resource ID for an EXE.\nRETURN: Number. Index of new icon.\nEX: IL_Add(imgListID, "C:\\Main.ico", 2)
IL_Create([StartNum:=2, Grow:=5, LargeIcons:=0])   \nUSE: Creates a new, empty ImageList.\nSTARTNUM: Number of icons to put into the initial list.\nGROW: When list size is exceeded, increase capacity by this number.\nLARGEICONS: 0 = Has small icons    1+ = Has large icons\nRETURN: Number. 0 = Failure    N+ = ID of the ImageList\nEX: IL_Create(10, 10, true)
IL_Destroy(IL_ID)   \nUSE: Delete the specified ImageList ID.\nRETURN: Number. 1=Success    0=Failure
InputHook([Options, EndKeys, MatchList])   \nUSE: Creates an object which can be used to collect or intercept keyboard input.\nOPTIONS: Zero or more of the following letters:\nB = BackspaceIsUndo\nC = CaseSensitive\nI = MinSend level\nL = Length Limit\nM= Modified Keystrokes\nT = Timeout\nV = Visible[Non]Text\n* = Wildcard (Anywhere)\nE = EndKeys are char code\nEndKeys: List of 0 or more keys to terminate input.\nMatchList: List of words that terminate input\nRETURN: Object. InputHook Object\nEX: InputHook() ;R=> 5
InStr(Data, Search, [Case:=1, Pos:=1, Occurrence:=1])   \nUSE: Searches through Data for a match to Search.\nDATA: The data (haystack) to search through.\nSEARCH: The string (needle) to search for.\nCASE: 1 = Case sensitive search    0 = Case insensitive search\nPOS: Char to start at. If negative, start at end and reverse search.\n    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last\nOCCURRENCE: For multiple matches, return the pos of this match.\nRETURN: Number. Index of match.\nREMARK: If Pos is negative, result is still chars from the beginning.\nEX: InStr("HotShot", "hot", 0, -3, 2) ;R=> 5
IsFunc(FunctionName)   \nUSE: Checks if specified function exists in the script.\nRETURN: Number. 0 = Not found    1 = Found    2+ = Found with parameters\nREMARK: Number of parameters is return value - 1.\nEx: IsFunc("StrLen") ;R=> 1
IsLabel(Label|Hotkey|Hotstring)   \nUSE: Checks if specified Label|Hotkey|Hotstring exists in the script.\nRETURN: Number. 0 = Not found    1+ = Found\nREMARK: Do not include colons.\nEX: IsLabel("GuiClose") ;R=> 1
IsObject(ObjectName)   \nUSE: Checks if specified label exists in the script.\nRETURN: Number. 0 = Not an Object    1+ = Is an Object\nEX: IsObject("MyObj") ;R=> 1
Ln(Num)   \nUSE: Math func. Returns the natural logarithm (base e) of Num.\nREMARK: Returns BLANK if Num is negative.\nEX: Ln(1.2) ;R=> 0.182322
LoadPicture(Filename, [Options, ByRef ImgType:=0])   \nUSE: Loads a picture from file and returns a bitmap or icon handle.\nOPTIONS: Any of the following. Space or tab separation allowed.\n    Wn|Hn: Sets width|height of image.\n    IconN: Load Nth icon from files with multiple images.\n    GDI+: Use GDI+ to load the image.\nIMGTYPE: Variable that stores the return handle type.\n    0 = IMAGE_BITMAP    1 = IMAGE_ICON    2 = IMAGE_CURSOR\nRETURN: Number. Handle.\nEX: Menu, Tray, Icon , % "HICON:" LoadPicture("Shell32.dll", "Icon28")
Log(Num)   \nUSE: Math func. Returns the logarithm (base 10) of Num.\nREMARK: Returns BLANK if Num is negative.\nEX: Ln(1.2) ;R=> 0.079181
LTrim(Str, [Omit:=A_Space A_Tab])   \nUSE: Removes all defined characters from the beginning of Str.\nOMIT: User defined characters to be trimmed. Default = Spaces Tabs\nEX: MsgBox, % LTrim("!!! HI !!!", "!") ;R=> HI !!!
LV_Add(Options, Field1, Field2, ..., FieldN)   \nUSE: Adds a new row to the bottom of the list.\nRETURN: Number. 0 = Failure    1+ = New row's number\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Select = Selects row            ColN = Begin at column number N\n    FocusN = Sets focus to row N    Check = Show check mark if available\n    Vis = Ensures row is visible    IconN = Nth Icon from imagelist\nEX: LV_Add("Check", "RowName")
LV_Delete([RowNum:=""])   \nUSE: Delete the specified row|all rows.\nROWNUM: BLANK = Delete all rows    N+ = Row number to delete\nRETURN: 0 = Failure    1 = Success\nEX: LV_Delete() ;R=> 1 = Deletes all rows
LV_DeleteCol(ColNum)   \nUSE: Deletes the specified column and all content beneath it.\nRETURN: 0 = Failure    1 = Success\nEX: LV_DeleteCol(1) ;R=> 1
LV_GetCount([Mode:=""])   \nUSE: Returns the total number of rows or columns\nMODE: BLANK      = Return total number of rows.\n      S|Selected = Return number of selected/highlighted rows.\n      Col|Column = Return total number of columns.\nEX: LV_GetCount("Col") ;R=> 4
LV_GetNext([StartNum:=0, RowType:=""])   \nUSE: Returns row number of the next selected|checked|focused row.\nSTARTNUM: Start row number.\nROWTYPE:\n    BLANK       = Returns the next selected/highlighted row.\n    C|Checked   = Returns the next checked row.\n    F|Focused   = Returns the row that has focus.\nEX: LV_GetNext(0, "F") ;R=> 3 = Gets the focused row.
LV_GetText(OutputVar, RowNum, [ColNum:=1])   \nUSE: Get text from the specified RowNumber and ColNumber.\nROWNUMBER: If 0, OutputVar is set to col header.\nRETURN: 1 = Success    0 = Failure. OutputVar is set to BLANK\nEX: LV_GetText(var, 0, 2) ; Var is set to the header of column 2
LV_Insert(RowNum, [Options:="", Col1, Col2, ..., ColN])   \nUSE: Insert a new row before the specified row.\nCOL: Contents to put in each column.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Select = Selects row            ColN = Begin at column number N\n    FocusN = Sets focus to row N    Check = Show check mark if available\n    Vis = Ensures row is visible    IconN = Nth Icon from imagelist\nREMARK: Like LV_Add() except newly inserted row uses the first parameter.\nEX: LV_Insert(2,, "A", "B", "C") ; Insert row at row 2. Set col 1,2,3 to A,B,C
LV_InsertCol(ColNum, [Options:="", ColTitle:=""])   \nUSE: Inserts a new column to the left of the specified column.\nOPTIONS:\n    Center = Center text         Text = SORT-Mark col is text\n    Uni = One-way sorting        IconRight = Icon goes on right\n    N = Col width in N pixels    Case = Sort is case-sensitive\n    Left = Left-justify text     Auto = Adjust col to fit contents\n    NoSort = Disables sorting    Desc = Start col in descending order\n    Right = Right-justify text   Sort = Sorts column in ascending order\n    IconN = Specify Nth Icon     Integer = Mark col has integer\n    SortDesc = Descending sort   AutoHdr = Adjust col to fit contents & header\n    Float = Mark col has float numbers\n    Logical = Digits inside text are sorted like true numbers instead of chars\n    CaseLocale = Sorting is case sensitive based on locale\nCOLTITLE: Header for the column.\nEX: LV_InsertCol(2, "Vis", "Col 2") ; Insert col at col 2. Title it "Col 2"
LV_Modify(RowNumber, [Options:="", NewCol1, ..., NewColN])   \nUSE: Modifies the text|attributes of a row.\nROWNUMBER: 0 = All rows are modified.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Check   = Show check mark if ListView has check boxes\n    ColN    = Col followed by number to begin applying Col1 parameters and beyond\n    FocusN  = Sets focus to row N\n    IconN   = Nth Icon from imagelist. Icon number > number of Icons    = Blank Icon\n    Select  = Selects the row\n    Vis     = Ensures specified row is completely visible\nRETURN: 0 = Failure. 1 = Success.\nEX: LV_Modify(1, "Select Check", "1") ; Select+Check first row. Change col1 text to 1.
LV_ModifyCol([ColNum:="", Options:="", ColTitle:=""])   \nUSE: Modifies the attributes|text of the specified column|header.\nREMARK: Providing no parameters will auto-adjust each row to fit the contents.\nOPTIONS:\n    Center = Center text         Text = SORT-Mark col is text\n    Uni = One-way sorting        IconRight = Icon goes on right\n    N = Col width in N pixels    Case = Sort is case-sensitive\n    Left = Left-justify text     Auto = Adjust col to fit contents\n    NoSort = Disables sorting    Desc = Start col in descending order\n    Right = Right-justify text   Sort = Sorts column in ascending order\n    IconN = Specify Nth Icon     Integer = Mark col has integer\n    SortDesc = Descending sort   AutoHdr = Adjust col to fit contents & header\n    Float = Mark col has float numbers\n    Logical = Digits inside text are sorted like true numbers instead of chars\n    CaseLocale = Sorting is case sensitive based on locale\nEX: LV_ModifyCol(1, "Desc") ; Col 1 is now sorted in descending order
LV_SetImageList(IL_ID, [IconType:=""])   \nUSE: Sets or replaces the ListView's ImageList.\nICONTYPE: 0 = Large    1 = Small    2 = State    BLANK = AutoDetect\nRETURN: On success, returns previous associated ListView.\nEX: LV_SetImageList(IL_ID, 0) ; Set new list and set icon type to large.
Max(Num1, Num2, ..., NumN)   \nUSE: Math func. Find the highest number in the Numbers provided.\nNUM: Any amount of numbers. If a string is used, return is BLANK.\nREMARK: Use * to pass an array. Use: Max(arrayName*)\nEX: Max(1, -1, 5.1, 5, 0) ;R=> 5.1
MenuGetHandle(MenuName)   \nUSE: Retrieves Win32 menu handle of a menu.\nRETURN: Number. Handle.\nEX: MenuGetHandle("File") ;R=> 0524e5
MenuGetName(Handle)   \nUSE: Retrieves the name of a menu based on a handle.\nRETURN: Handle.\nEX: MenuGetName(0524e5) ;R=> File
Min(Num1, Num2, ..., NumN)   \nUSE: Math func. Find the lowest number in the Nums provided.\nNUM: Any amount of numbers. If a string is used, return is BLANK.\nREMARK: Use * to pass an array. Use: Min(arrayName*)\nEX: Min(1, -1, 2, -10, 5) ;R=> -10
Mod(Dividend, Divisor)   \nUSE: Remaining amount after dividend has been divided by the divisor.\nDIVIDEND: The number being divided.\nDIVISOR: The number you're dividing by.\nEX: Mod(-10, 4) ;R=> -2
NumGet(Var|Address, [Offset:=0, Type:="UPtr"])   \nUSE: Get the binary number at the specified address and offset.\nVAR: Variable's string buffer address is used.\nTYPE: Must be enclosed in quotes.\n    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr\nRETURN: BLANK = Invalid address\nREMARk: If Type is put in the second parameter, offset is assumed 0.\nEX: NumGet(MyVar, 4, "UInt") ; Gets 4 bytes starting at the 4th byte in MyVar
NumPut(Num, Var|Address, [Offset:=0, Type:="UPtr"])   \nUSE: Stores binary data at the specified address and offset.\nVAR: If a variable's, the string buffer address is used.\nTYPE: Must be enclosed in quotes.\n    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr\nRETURN: BLANK = Invalid address\nEX: NumPut(1, MyVar, 4, "UInt") ; Puts a 1 in the 4 to 7 byte section of MyVar.
ObjAddRef(Ptr)   \nUSE: Increments an object's reference count.\nRETURN: Number. New reference count.\nREMARK: Should only be used when dealing with unmanaged pointers to objects.
ObjBindMethod(ObjectName, MethodName, [Params])   \nUSE: Creates a BoundFunc object with a binded method.\nEX: rlRef := ObjBindMethod(fileObj, "ReadLine") ; Get reference to this\n                              ; FileObject's built-in ReadLine() method.
Object(Key1, Value1, Key2, Value2, ..., KeyN, ValueN)   \nUSE: Creates an associative array/key-value pair object.\nMETHODS: All objects have access to these methods:\n    Clone()    MaxIndex()    InsertAt()    GetAddress()\n    Count()    MinIndex()    RemoveAt()    GetCapacity()\n    Pop()      Delete()      _NewEnum()    SetCapacity()\n    Push()     Length()      HasKey()\nRETURN: Object.\nEX: appleObj := Object(color:"red",stem:true,cal:130)
ObjGetBase(Obj)   \nUSE: Get base object of Obj.\nRETURN: BLANK = No base. Otherwise, base name.\nREMARK: No meta-functions are called.\nEX: ObjGetBase(newClass) ;R=> MainBaseClass
ObjRawGet(Object, Key)   \nUSE: Retrieve value associated with Key in Object.\nREMARK: No meta-functions or property functions are called.\n    Synonymous with: data := Object[Key]\nRETURN: BLANK = Key not exist. Otherwise, returns key value.\nEX: data := ObjRawGet("MyObj", "Key2") ; Gets data from key2 of MyObj
ObjRawSet(Obj, Key, Data)   \nUSE: Store/overwrite Data to Obj's Key.\nREMARK: No meta-functions or property functions are called.\n    Synonymous with: Object[key] := data\nEX: ObjRawSet("MyObj", "Key2", "SciTE") ; Puts string SciTE into Key2 of MyObj
ObjRelease(Ptr)   \nUSE: Decrements an object's reference count.\nRETURN: Number. New reference count.\nREMARK: Should only be used when dealing with unmanaged pointers to objects.
ObjSetBase(Object, BaseObject)   \nUSE: Set's an object's base object.\nREMARK: No meta-functions are called.\nRETURN: BLANK = Object has no base.
OnClipboardChange(Func, [AddRemove:=1])   \nUSE: Launches a function|func object when clipboard's contents change.\nFUNC: Function name or FuncObj. First parameter pass will mean Clipboard:\n    0 = Is empty    1 = Contains text    2 = Contains binary data\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnClipboardChange("ClipBackup", -1)
OnError(Func, [AddRemove:=1])   \nUSE: Specifies a function to run automatically when an unhandled error occurs.\nFUNC: Function|FuncObj. First parameter is an exception object or thrown value.\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnError("LogError", -1) ; Immediately run an error logger on error
OnExit(ExitFunc, [AddRemove:=1])   \nUSE: Specifies a function to run automatically on script exit.\nEXITFUNC: Function|FuncObj. Param1 = ExitReason. Param2 = ExitCode.\n    EXITREASON: Logoff|Shutdown|Close|Error|Menu|Exit|Reload|Single\n    EXITCODE: Number. -2147483648 .. 2147483647\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnExit("LogError", -1) ; Immediately run an error logger on error
OnMessage(MsgNum, [Func:="", MaxThread:=1])   \nUSE: Run a function|FuncObj when the program receives the specified message.\nMSGNUM: Number. 0 .. 4294967295\nFUNC: Function|FuncObj to run.\nMAXTHREAD: Max amount of threads. 0 = Unregister function.\n    -N = Call function before any others and give N max threads.\nRETURN: Completely depends on if a Function or FuncObj is used.\n    OnMessage's return values are complex. Please see the docs for return info.\nEX: OnMessage(0x201, "LeftClick") ; LeftClick() fires on left mouse down
Ord(String)   \nUSE: Get ordinal number (numeric character code) of String's first character.\nRETURN: 0 = Empty string. Otherwise, returns first character's code.\nEX: Ord("test") ;R=> 116 Because t is 116.
RegExMatch(Haystack, [Options]Needle, [OutputVar:="", Pos:=1])   \nUSE: Check a string for a specified pattern (Regular Expression).\nHAYSTACK: String to search through.     NEEDLE: RegEx Pattern to search for.\nOPTIONS: RegEx prefix options. A ) should separate options from needle.\n    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line\n    A = Force ^ anchor      D = Force $ anchor       S = Study pattern\n    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars\n    P = Position mode       C = Auto-callout mode   `a = Use all newline forms\n    `n = Use `n as default new line    J = Allow duplicate named subpatterns\n    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r\nOUTPUTVAR: Variable content dependent on:\n    Normal Match = Store the full pattern match.\n    P Option = Store the length of pattern match.\n    O Option = Stores a Match Object.\nPOS: Char to start at. 0 starts at end. Negative starts left of end.\n    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last\nRETURN: Number. N = Position of first occurrence    0 = Not found\nErrorLevel: 0 = No Errors    -Number = RegEx Execution error\n    "Compile error N at offset M". N = PCRE error number. M = error position.\nEX: RegExMatch(email, "\\S+?@\\S*\\.\\w{2,}") ; => Basic email verification.
RegExReplace(Haystack, [Options]Needle, [Replace:="", Count:="", Limit:=-1, Pos:=1])   \nUSE: Searches a string for a specified pattern and replace match.\nHAYSTACK: String to search.             NEEDLE: RegEx Pattern to find.\nOPTIONS: RegEx prefix options. A ) should separate options from needle.\n    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line\n    A = Force ^ anchor      D = Force $ anchor       S = Study pattern\n    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars\n    P = Position mode       C = Auto-callout mode   `a = Use all newline forms\n    `n = Use `n as default new line    J = Allow duplicate named subpatterns\n    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r\nREPLACE: Replacement text.              COUNT: Number of replacements.\nLIMIT: Max amount of replacements.\nPOS: Char to start at. 0 starts at end. Negative starts left of end.\n    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last\nRETURN: String. Modified haystack.\nREMARK: StrReplace() is faster. Use when possible.\nErrorLevel: 0 = No Errors    -Number = RegEx Execution error    M = Error pos\n    String = "Compile error N at offset M"     N = PCRE error num\nEX: RegExReplace("Appple", "pp", "p") ;R=> Apple
RegisterCallback(Function|FuncObj, [Options:="", PCount:="", EventInfo:=Address])   \nUSE: Used to redirects a call to a function|FuncObj via a machine-code address.\nOPTIONS: Space separated options:\n    Fast|F = Avoid starting a new thread for each function call\n    CDecl|C = Conform to "C" address calling convention\nPCOUNT: Number of params being passed. If BLANK, defaults to mandatory param number.\nREMARK: Due to the complexity of this command, the docs should be read.\nEX: RegisterCallback("TheFunc", "F", 3)
Round(Num, [N:=0])   \nUSE: Math func. Rounds Number to N places.\nN:  0 = Round to nearest integer.\n   +N = Rounds Num right N decimal places.\n   -N = Rounds Num left N integers.\nEX: Round(3.49), Round(350,-2) ;R=> 3, 400
RTrim(String, [Omit:=A_Space A_Tab])   \nUSE: Removes all defined characters from the end of String.\nOMIT: User defined characters to be trimmed. Default = Spaces Tabs\nEX: MsgBox, % RTrim("!!! HI !!!", "!") ;R=> !!! HI
SB_SetIcon(Filename, [IconNum:=1, PartNum:=1])   \nUSE: Display a small icon left of the text in status bar PartNum.\nFILENAME: Path to an icon resource or an icon handle.\nICONNUM: To use another icon group, specify an icon group number.\nRETURN: 0=Failure    1+= HICON address\nEX: SB_SetIcon("Shell32.dll", 2) ; Chooses the 2nd icon from shell32
SB_SetParts(Width1, Width2, .. Width255)   \nUSE: Divides bar into multiple parts.\nWIDTH: Specify width in pixels for all parts but last. Last part pixels = leftovers.\nRETURN: 0 = Failure. 1+ = Success. Return status bar's HWND.\nEX:    SB_SetParts(50,50) ; Creates 3 parts. Two 50-pixel parts. 3rd = remaining pixels
SB_SetText(Text, [PartNum:=1, Style:=0])   \nUSE: Change the text in a status bar.\nTEXT: Justify text with Tabs: 0 = Left    1 = Center    2 = right\nPARTNUM: Section of status bar to change.\nSTYLE: Status bar border: 0 = Traditional    1 = None    2 = Raised\nRETURN: 0 = Failure    1 = Success\nEX: SB_SetText("txt", 2, 1]) ; Removed status bar part 2 border and added txt
Sin(Num)   \nUSE: Math func. Get the trigonometric sine of Num.\nNUMBER: Must be in radians.\nEX: Sin(1.2) ;R=> 0.932039
Sqrt(Num)   \nUSE: Get the square root of Num.\nRETURN: Number. BLANK = Num was negative.\nEX: Sqrt(121) ;R=> 11
StrGet(Address, [Length:="", Encoding:=SameAsEXE])   \nUSE: Copy a string from a memory address.\nADDRESS: Memory address to read from.\nLENGTH: Number of bytes to retrieve.\nENCODING: Defaults is exe type.\n    UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn\nRETURN: String. Requested encoded string. BLANK = Invalid param\nEX: StrGet(Addy, 8) ; Get 8 bytes from the address Addy
StrLen(Str)   \nUSE: Get the number of characters in Str.\nEX: StrLen("The quick brown fox...") ;R=> 22
StrPut(String, Address, [Length:="", Encoding:=SameAsEXE])   \nUSE: Write a string to a memory address.\nADDRESS: Memory address to write to.\nLENGTH: Number of bytes to write.\nENCODING: Defaults is exe type.\n    UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn\nRETURN: 0 = Failure    BLANK = Invalid param    N+ = Chars written\nEX: StrPut("Test", addy) ; Store test to the handle in addy
StrReplace(Data, Search, [Replace:="", OutCount:="", Limit:=-1])   \nUSE: Replaces Search matches in data with the Replace string\nDATA: String to search through          SEARCH: String you're trying to match\nREPLACE: String to replace matches      OUTCOUNT: Stores number of matches\nLIMIT: N = Number of replacements    -1 = All\nRETURN: String. Data after replacements (if any) have been made.\nEX: StrReplace("2 tsp salt", "tsp", "teaspoon") ;R=> 2 teaspoon salt
StrSplit(Data, [Delim:="", Trim:="", MaxParts:=-1])   \nUSE: Splits Data up into elements of an array.\nDELIM: String or array of characters. Marks where to split each element.\nTRIM: String of characters trimmed from the beginning and end of each element.\nMAXPARTS: Max array elements. Any remaining data is put in last element.\n    -1 = No array size limit\n    1+ = Max number of array elements\nRETURN: Object. Array.\nEX: StrSplit(var,"`n"," `t",6) ; Split var into 6 elements by line
SubStr(Str, Pos, [Length:=StrLen(Str)])   \nUSE: Get substring from Str starting at Pos and ending at Length.\nPOS: Char to start at. 0 starts at end. Negative pos is number left of end.\n    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last\nLENGTH: Length of characters to capture.\n    +Num = Capture Num characters after Pos.\n    -Num = Capture from Pos to end of string and omits last Num chars.\nRETURN: String. Modified Str.\nEX: SubStr("CatDogBird",1,6), SubStr("CatDogBird",-6,-4) ;R=> CatDog, Dog
Tan(Num)   \nUSE: Math func. Get the trigonometric tangent of Number.\nNUMBER: In radians.\nEX: Tan(1.2) ;R=> 2.572152
Trim(Str, [Omit:=A_Space A_Tab])   \nUSE: Removes all defined characters from both sides of Str.\nOMIT: User defined characters to be trimmed.\nEX: MsgBox, % Trim("!!! HI !!!", "!") ;R=> HI
TV_Add(Name, [ParentID:=0, Options:=""])   \nUSE: Add a new item to the TreeView.\nNAME: Text of the item.                 PARENTID: ID of new item's parent.\nOPTIONS: Tab|Space separated string of options. + to add option. - to remove.\n    Bold = Name is bolded               IconN = Use Nth icon from ImageList\n    Check = Check left of item          Expand = Show children\n    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top\n    Select = Select this item\n    Sort|First|N = Item is added alphabetically|to first slot|to slot N\nRETURN: 0 = Failure.\nEX: c1 := TV_Add("Child1", "P1" ,"+Vis") ; Makes a treeview child belonging to P1
TV_Delete([ItemID:=""])   \nUSE: Deletes the specified item or all items.\nREMARK: If no parameter is passed, all treeview items are deleted.\nRETURN: 1 = Success    0 = Failure
TV_Get(ItemID, Attribute)   \nUSE: Check if an item has the specified attribute(s).\nATTRIBUTE:\n    B|Bold = Item font is bolded\n    E|Expand|Expanded = Item is expanded\n    C|Check|Checked = Item is checked\nRETURN: 0 = Failure or no attribute. Otherwise, return ItemID.
TV_GetChild(ParentID)   \nUSE: Get the ID number of ParentID's first/top child.\nRETURN: 0 = None. 1+ = Child ID.\nEX: TV_GetChild(P1) ;R=> C1
TV_GetCount()   \nUSE: Returns the total number of items in the control.\nREMARK: Always instantaneous because controls keep track of count.\nEX: TV_GetCount() ;R=> 10
TV_GetNext([ItemID:="", ItemType:=""])   \nUSE: Get ID number of the item after ItemID.\nITEMID: Item's ID number or 0 for top item.\nITEMTYPE: F|Full = Retrieves next item regardless of relationship\n    C|Check|Checked = Retrieves next checked item regardless of relationship\nRETURN: Number.\n    No param = Return ID of top item in TreeView\n    ItemID Only = Return ID of ItemID's next sibling\n    ItemID F|C = Return ID of next item|checked item regardless of relationship\nEX: TV_GetNext("Child3", "Full") ;R=> Parent 2
TV_GetParent(ItemID)   \nUSE: Get the ID of ItemID's parent.\nRETURN: 0 = Failure or no parent. Otherwise, return parent ID.\nEX: TV_GetParent("c1") ;R=> P1
TV_GetPrev(ItemID)   \nUSE: Get the ID of the sibling above ItemID.\nRETURN: 0 = Failure or none. Otherwise, return sibling ID.\nEX: TV_GetPrev("c2") ;R=> c1
TV_GetSelection()   \nUSE: Get the ID number of the currently selected item.\nEX: TV_GetSelection() ;R=> c2
TV_GetText(OutputVar, ItemID)   \nUSE: Stores the text of ItemID to OutputVar.\nREMARK: OutputVar is capped at 8191 characters.\nRETURN: 0 = Failure. Otherwise, return ItemID.\nEX: TV_GetText(p1c2Name, "c2") ;R=> c2
TV_Modify(ItemID, [Options:="", NewName:=""])   \nUSE: Modifies the attributes|name of an item.\nOPTIONS: Tab|Space separated string of options. + to add option. - to remove.\n    Bold = Name is bolded               IconN = Use Nth icon from ImageList\n    Check = Check left of item          Expand = Show children\n    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top\n    Select = Select this item\n    Sort|First|N = Item is added alphabetically|to first slot|to slot N\nNEWNAME: If present, renames ItemID.\nRETURN: 0 = Failure. Otherwise, return ItemID.\nREMARK: When ItemID is the only parameter, the item is selected.\nEX: TV_Modify("P1", "Bold", "Main") ; Change P1's name to Main in bold.
TV_SetImageList(ImageListID, [IconType:=0])   \nUSE: Creates or replaces a TreeView's ImageList.\nICONTYPE: 2 = State icons (Not yet supported)\nRETURN: 0 = Failure. Otherwise, returns previous ImageListID.\nEX: TV_SetImageList("UpdatedImgList")
VarSetCapacity(Variable, [Cap, Fill:=0])   \nUSE: Adjusts the size of Variable or free its memory.\nCAP: Requested size in bytes.\nFILL: Number. 0 .. 255. Fills every byte with Fill number.\nRETURN: Number of bytes the variable can currently hold.\n    BLANK = Variable not found.\n    No Params = Return size of Variable.\nEX: VarSetCapacity(rectStruct, 16) ; Set a Rectangle Structure var to 16 bytes
WinActive(WinTitle, [WinText, NotTitle, NotText])   \nUSE: Check if the current active window matches the WinTitle criteria.\nWINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A\nREMARK: !WinActive() acts as WinNotActive(). WinTitle A = Use active window.\nRETURN: 0 = Failure. 1+ = Active window's Unique ID (HWND)\nEX: WinActive("ahk_exe SciTe.exe") ;R=> 054c2d5
WinExist(WinTitle, [WinText, NotTitle, NotText])   \nUSE: Check if any current windows match the WinTitle criteria.\nWINTITLE: WinTitle and it's matching behaviors. See WinTitle command.\n    Types: ahk_exe    ahk_class    ahk_id    ahk_pid    ahk_group\nREMARK: !WinExist() acts as WinNotExist()\nRETURN: 0 = Failure. 1+ = Matching window's Unique ID (HWND)\nEX: WinExist("ahk_exe.exe") ;R=> 054c2d5

Break [LoopLabel]   \nUSE: Stop current loop or the loop running under LoopLabel.\nLOOPLABEL: A label directly over a loop or a loop level number.\n    1 = Current loop    2 = Previous loop    String = Label above a loop\nREMARK: LoopLabel cannot be a variable.\nEX: Break, LoopLvl2 ; Breaks the loop with a label over it called LoopLvl2
Catch [OutputVar]   \nUSE: Executes code when a try statement throws an exception.\nOUTPUTVAR: Stores an Exception Object.\nREMARK: Catch is used with Try like Else is with If.\nEX: Catch, excepObj ; Catches a try error and notifies user about it\n        MsgBox, An error occurred. Data is saved to excepObj.
Continue [LoopLabel]   \nUSE: End current loop iteration and start the next one.\nLOOPLABEL: A label directly over a loop or a loop level number.\n    1 = Current loop    2 = Previous loop    String = Label above a loop\nREMARK: LoopLabel cannot be a variable.\nEX: Continue, 2 ; Stops current iteration. Continues previous loop's next iteration
Else   \nUSE: Specifies the command(s) to run if the matching if-statement is False.\nREMARK: An else must follow|belong to an if-statement.\nEX: if (x = True)\n        MsgBox, X is true\n    Else MsgBox, X is false
Exit [ExitCode]   \nUSE: Stops current thread or calls ExitApp if script is not persistent.\nEXITCODE: Number -2147483648 .. 2147483647
Finally   \nUSE: Commands in a Finally block must execute after a Try-statement.\nREMARK: Finally must belong a Try-statement.\nEX: Try            ; Tries a function and then logs the event.\n        ThisFunc()\n    Finally LogEvent()
For Key, [Value] in Expression   \nUSE: Loop through an object. Execute the following commands for each element.\nKEY|VALUE: These can be whatever words you want. They are temporary variables.\nEX: For fruit, color in Object("Apple","Red","Grape","Purple")\n        MsgBox, % "The " color " " fruit "." ; Displays items in new object
GoSub, Label   \nUSE: Thread continues to specified label and return to GoSub line if a return is reached.\nLABEL: Name of a label, hotkey, or hotstring.\nREMARK: If a return is encountered, the thread returns to GoSub's original line.\n    If a an exit is encountered, code flow is halted.\nEX: MyLabel:           ; Creates an infinite loop\n        GoSub, MyLabel
GoTo, Label   \nUSE: Thread continues to specified label.\nLABEL: Name of a label, hotkey, or hotstring.\nREMARK: Unlike GoSub, the return command stops the thread like Exit.\nEX: MyLabel:          ; Creates an infinite loop\n        GoTo, MyLabel
If   \nUSE: Used to make a decision by evaluating something.\nREMARK: 0|False|BLANK = False    True|+Number = True.\n    !|Not checks for a False statement. Blocking {} allows running multiple commands.\nVARIATIONS:\n    If [!](Expression)\n        If Expression evaluates to True\n    If Var [not] between Lower and Upper\n        If Var falls between Lower and Upper bounds (inclusive)\n    If Var [not] in MatchList\n        If Var matches any element in MatchList\n    If Var [not] contains MatchList\n        If any element from MatchList is found anywhere inside Var\n    If Var is [not] Type\n        If var is of the specified type
If [!](Expression)   \nUSE: If Expression evaluates true, run the next line|block.\nREMARK: If ! is present, check for false evaluation instead of true.\n    Omitting parenthesis is a traditional-if. They're deprecated.\nEX: if (2 > 1) ; => True
IfBetween   \nIf Var [not] between Lower and Upper\nIf Var [not] between Lower and Upper\nUSE: Run the next line|block if Var is between Lower and Upper bounds.\nLOWER|UPPER: Lowest and highest value that Var can fall between (inclusive).\nREMARK: If "not" is included, check for false evaluation instead of true.\n    Numbers and strings can be evaluated.\nEX: If var between papaya and plum ; var := "Pear" => True
IfIn   \nIf Var [not] in MatchList\nIf Var [not] in MatchList\nUSE: Checks if Var has an exact matches to an element in MatchList.\nVAR: Can be a number or string.\nMATCHLIST: A comma separated list. Spacing is not ignored.\n    To make a literal comma in the match list, use 2 commas.\nREMARK: If you need a blank element, start the matchlist with a comma.\nEX: If var in peach,pear,plum ; var := "pear" => True
IfContains   \nIf Var [not] contains MatchList\nIf Var [not] contains MatchList\nUSE: Checks if any element from MatchList matches any part of Var.\nMATCHLIST: A comma separated list. Spaces are not ignored.\n    To make a literal comma in the match list, use 2 commas.\nREMARK: If you need a blank element, start the matchlist with a comma.\nEX: If var contains word,word2,TE4 ; var := "SciTE4AHK" => True
IfIs   \nIf Var is [not] Type\nIf Var is [not] Type\nUSE: Checks if Var conforms to the the specified type.\nTYPE: Name          Define\n      Integer       Whole numbers only.\n      Float         Integer + decimals allowed.\n      Number        Integer + float.\n      Digit         Digits 0123456789 are allowed.\n      XDigit        Hex digits 0123456789ABCDEF + 0x prefix allowed.\n      Alpha         UPPER and lower alphabetic chars. A-Z + a-z\n      Upper         ONLY UPPERCASE ALPHA.\n      Lower         only lowercase alpha.\n      AlNum         Allows alpha or digit chars.\n      Space         Only whitespace allowed. Space|Tab|Linefeed|(etc...)\n      Time|Date     Only date-time stamps allowed. YYYYMMDDHH24MISS\nEX: If var is AlNum ; var := "SciTE4AHK" => True
IfMsgBox, ButtonName   \nUSE: Run the following line|block based on the last MsgBox's pushed button.\nBUTTONNAME: Yes|No|OK|Cancel|Abort|Ignore|Retry|Continue|TryAgain\nEX: IfMsgBox, Abort\n        LogError("User clicked abort") ; Logs that a user aborted something
Loop   \nUSE: Repeatedly performs the next line|block of code.\nVARIATIONS: All loops are stopped by a Break or a Return\n    Loop, [Count]\n        Repeats indefinitely or until A_Index >= Count\n    Loop, Files, FilePattern\n        Loop through specified files and/or folders\n    Loop, Parse, String\n        Loop through a string by character or substring\n    Loop, Read, InputFile\n        Loop through each line of a file\n    Loop, Reg, KeyName\n        Loop through keys/subkeys of the registry\n    Until (Expression)\n        Breaks a loop when expression evaluates true. Used after a loop.\n    While (Expression)\n        Loop while expression evaluates true
Loop,Count   \nLoop, [Count]\nLoop, [Count]\nUSE: Repeat commands until break is encountered or Count loops have happened.\nCOUNT: Number of iterations. This number is stored in A_Index.\nREMARK: Use Break to stop a loop.\nEX: Loop, 3\n        MsgBox, % "Iteration #" A_Index ; Shows 3 loop iterations
Loop,Files   \nLoop, Files, FilePattern [Mode:=F]\nLoop, Files, FilePattern [Mode:=F]\nUSE: Loop through the specified files and/or folders.\nFILEPATTERN: Name|path to a file|folder. Wildcards are allowed.\nMODE: Any combination of the following. Spacing optional.\n    D = Directories    F = Files    R = Recurse into subdirectories\nREMARK: The following built-in variables can be used inside a Files-Loop\n    A_LoopFileName  A_LoopFileSizeKB    A_LoopFileShortName\n    A_LoopFileExt   A_LoopFileSizeMB    A_LoopFileShortPath\n    A_LoopFileDir   A_LoopFileAttrib    A_LoopFileTimeCreated\n    A_LoopFileSize  A_LoopFileLongPath  A_LoopFileTimeModified\n    A_LoopFilePath  A_LoopFileFullPath  A_LoopFileTimeAccessed\nEX: Loop, Files, % A_ScriptDir "\\*.ah?"  ; Show .ah* files in script dir\n        MsgBox, A_LoopFileName
Loop,Parse   \nLoop, Parse, String, [Delim:="", Omit:=""]\nLoop, Parse, String, [Delim:="", Omit:=""]\nUSE: Loops through String one substring at a time.\nREMARK: The following built-in variables can be used inside a Parse-Loop\n    A_Index = Current loop iteration    A_LoopField = Current substring\nDELIM: Determines what characters create a substring.\n    BLANK = Parse through each character.\nOMIT: User defined string of characters to trim from the end of each substring.\nEX: Loop, Parse, var ; var := "SciTE4AHK"\n        MsgBox, % A_LoopField
Loop,Read   \nLoop, Read, InputFile, [OutputFile]\nLoop, Read, InputFile, [OutputFile]\nUSE: Retrieves text from a file, one line at a time.\nINPUTFILE: File to read.\nOUTPUTFILE: Optional file you can write to.\n    Quickly write to OutputFile by using: FileAppend, Text\n    Prefix outputfile with an * to us use LF instead of CR+LF.\n    Using * for OutputFile's name allows FileAppend to send text to StdOut.\nREMARK: The following built-in variables can be used inside a Parse-Loop\n    A_LoopReadLine = Current line's text    A_Index = Current loop iteration\nEX: Loop, Read, % A_ScriptFullPath ; Loop through current script\n        MsgBox, % A_LoopReadLine   ; Show each line
Loop,Reg   \nLoop, Reg, KeyName, [Mode]\nLoop, Reg, KeyName, [Mode]\nUSE: Loops through registry keys and subkeys, one at a time.\nKEYNAME: Full key name. Must start with HKLM|HKU|HKCU|HKCR|HKCC\nMODE: Any combination of the following. Spacing optional.\n    K = Keys    V = Values    R = Recurse into subkeys\nREMARK: The following built-in variables can be used inside a Reg-Loop\n    A_Index          A_LoopRegType      A_LoopRegKey\n    A_LoopRegName    A_LoopRegSubKey    A_LoopRegTimeModified\nEX: Loop, Reg, HKCR\\AutoHotkeyScript, KVR\n        MsgBox, % "Path: " A_LoopRegKey "\\" A_LoopRegSubKey
Return (Expression)   \nUSE: Return a thread to the line after the GoSub|Function|Label|GroupActivate caller.\nEXPRESSION: Only used inside of functions. Expression is returned to caller.\nREMARK: If thread can't return to caller (top of call stack), Return acts like Exit.\nEX: Return (result)
Switch [SwitchValue]   \n{\n    Case p1: ; Code\n    Case p2a,p2b: ; Code\n    Default: ; Code\n}\nUSE: Evaluate SwitchValue against case branches until a match is found.\nSWITCHVALUE: Data or an expression to evaluate once.\nCASE: Each case branch must be prefixed with the word case.\nDEFAULT: Default case is optional and executes if no matches are found.\nREMARK: Single commands can be put on the same line as the case statement.\n Multiple commands need to be nested below the case line\nEX: Switch SwitchValue\n{\n    Case 0,"": Return "false"\n    Default: Return "true"\n}
Throw (Expression)   \nUSE: Signals when an error has occurred. This signal is used by Try's Catch.\nEXPRESSION: The value stored in Catch's OutputVar.\nREMARK: If Expression is omitted, an Exception Object is thrown instead.\nEX: Throw (ErrorVar) ; Throws a variable called ErrorVar that catch can use
Try   \nUSE: Guards the next line|block from runtime errors and can throw exceptions.\nREMARK: Used with catch.\nEX: Try                ; Try some function.\n        SomeFunction()
Until (Expression)   \nUSE: Evaluates Expression each loop iteration. If True, loop breaks.\nREMARK: Use an Until-Loop to guarantee the loop code will run once.\n    Use a While-Loop if you don't want the loop code to run once.\nEX: Loop                    ; Start loop\n        MsgBox, % A_Index   ; Show each A_Index iteration\n    Until (A_Index >= 10)   ; Break when A_Index >= 10
While (Expression)   \nUSE: Loops through code while Expression evaluates as False.\nREMARK: Use an Until-Loop to guarantee the loop code will run once.\n    Use a While-Loop if you don't want the loop code to run once.\nEX: While (A_Index <= 5)\n        MsgBox, % "Iteration #" A_Index

AutoTrim, On|Off   \nUSE: Controls if whitespace is trimmed from the beginning|end of traditional variables.\nONOFF: On|1 = Trim whitespace    Off|0 = Don't trim whitespace\nREMARK: A_AutoTrim contains this commands current setting.
BlockInput, Mode   \nUSE: Enable and disable keyboard, mouse, and|or mouse movement.\nMODE1: Keyboard and mouse.    On = Enable    Off = Disable\nMODE2: During send and|or mouse events.\n    Send  = Disable during Send|SendRaw.\n    Mouse = Disable during Click|MouseMove|MouseClick|MouseDrag.\n    SendAndMouse = Send mode + mouse mode.\n    Default = Disable all other modes.\nMODE3: Mouse movement.    MouseMove = Disable    MouseMoveOff = Enable\nREMARK: Each mode operates independently of the others.
Click, [Button:=Left, X, Y, Count:=1, State, Relative|Rel]   \nUSE: Send different mouse button events.\nBUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL    X|Y: Click coordinates\nSTATE: Down|D=Held down    Up|U=Released       COUNT: Number of clicks\nRELATIVE: Movement is relative to mouse position.\nREMARK: Unlike most commands, blank params do not require a comma.\n    Click can be used with send: Send, {Click, Left, 2}\nEX: Click, Left, 50, -50, 2, Rel ; Double click 50 pixels right and\n                                 ; and 50 pixels up from cursor.
ClipWait, [SecToWait:=Indefinitely, DataType:=0]   \nUSE: Waits until the clipboard contains data.\nSECTOWAIT: Seconds to wait for the clipboard.\n    0 = .5 seconds    1+ = Seconds\nDATATYPE: 0 = Wait for text    1 = Wait for any binary data\nErrorLevel: 0 = Success. 1 = SecToWait expired.
Control   \nControl, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText]\nControl, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Used to manipulate controls.\nSUBCOMMANDS:\n    Check = Check radio button|checkbox     Uncheck = Uncheck radio button|checkbox\n    Enable = Enable control                 Disable = Disable control\n    Show = Make control visible             Hide = Hide control\n    Style = Apply style to control          ExStyle = Apply ex style to control\n    ShowDropDown = Show ComboBox DDL        HideDropDown = Hide ComboBox DDL\n    TabLeft = Go left X tabs                TabRight = Go right X tabs\n    Add = Add to bottom of ListBox|ComboBox Delete = Remove Nth ListBox|ComboBox entry\n    Choose = Select Nth ListBox|ComboBox    EditPaste = Paste at edit box caret\n    ChooseString = Select first ListBox|ComboBox entry to match String\nCONTROL: Name or text of control. HWND control is done through WinTitle.\nWINTITLE: Standard WinTitle matching. For a handle, use: ahk_id %HWND%\nErrorLevel+EXO: 0 = Success. 1 = Failure.
Control,Check, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Turns on|checks a radio button or checkbox.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Check, , GuiCheck1, ahk_exe MyProg.exe
Control,Uncheck, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Turns off a radio button or checkbox.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Uncheck, , GuiCheck1, ahk_exe MyProg.exe
Control,Enable, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Enables a disabled control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Enable, , GuiBtn1, ahk_exe MyProg.exe
Control,Disable, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Disables|grays out an enabled control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Disable, , GuiBtn1, ahk_exe MyProg.exe
Control,Show, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Shows a previously hidden control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Show, , GuiBtn1, ahk_exe MyProg.exe
Control,Hide, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Hides a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Hide, , GuiBtn1, ahk_exe MyProg.exe
Control,Style, Hex, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Changes the style of a control.\nHEX: A style hex Num.\n     Num: Set to style Num              -Num: Remove style Num from control\n    ^Num: Toggle control's style        +Num: Add style Num to control\nREMARK: Some style changes require a redraw. See: WinSet, Redraw\nErrorLevel+EXO: 0 = Success. 1 = Window not found or style can't be applied.\nEX: Control, Style, 0x200, GuiBtn1, ahk_exe MyProg.exe
Control,ExStyle, Hex, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Changes the extended style of a control.\nHEX: A extended style hex Num.\n    Num: Set to style Num               -Num: Remove style Num from control\n    ^Num: Toggle control's style        +Num: Add style Num to control\nREMARK: Some style changes require a redraw. See: WinSet, Redraw.\nErrorLevel+EXO: 0 = Success. 1 = Window not found or style can't be applied.\nEX: Control, ExStyle, 0x200, GuiBtn1, ahk_exe MyProg.exe
Control,ShowDropDown, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Shows the drop-down list of a ComboBox control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, ShowDropDown, , Combo1, ahk_exe MyProg.exe
Control,HideDropDown, [, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Hides the drop-down list of a ComboBox control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, HideDropDown, , Combo1, ahk_exe MyProg.exe
Control,TabLeft, [Count, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Moves a SysTabControl32 tab to the left.\nCOUNT: Number of tabs to move left.\nREMARK: To select a tab by number, see: SendMessage with 0x1330 and 0x130C\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, TabLeft, 3, GuiTabs, ahk_exe MyProg.exe
Control,TabRight, [Count, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Moves a SysTabControl32 tab to the right.\nCOUNT: Number of tabs to move right.\nREMARK: To select a tab by number, see: SendMessage with 0x1330 and 0x130C\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, TabRight, 3, GuiTabs, ahk_exe MyProg.exe
Control,Add, String, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Add a new entry to the bottom of a ListBox|ComboBox\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Add, String, ComboBox2, ahk_exe MyProg.exe
Control,Delete, N, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Deletes the Nth entry from a ListBox|ComboBox\nN: Number of control to delete. 1=First    2=Second   etc...\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Delete, 10, ComboBox2, ahk_exe MyProg.exe
Control,Choose, N, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Sets the selection in a ListBox|ComboBox to be the Nth entry.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, Choose, 2, ListBox1, ahk_exe MyProg.exe
Control,ChooseString, String, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Searches a ListBox|ComboBox and selects the first matching entry.\nSTRING: The string to search for inside the ListBox|ComboBox.\nREMARK: This is not case sensitive.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, ChooseString, ListBox1, ahk_exe MyProg.exe
Control,EditPaste, String, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Inserts String into an Edit control at the caret.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Control, EditPaste, String, Edit1, ahk_exe MyProg.exe
ControlClick, [Control|Pos, WinTitle, WinText, Button, Count, Options, NotTitle, NotText]   \nUSE: Sends a mouse event directly to a control.\nCONTROL: Name|Text of control. Uses SetTitleMatchMode.\nBUTTON: LEFT|RIGHT|MIDDLE|X1|X2|WU|WD|WL|WR    COUNT: Number of clicks\nPOS: Use xNum yNum for coord position. Uses: CoordMode, Mouse\nOPTIONS: A space separated string of the following:\n    D|U = Set button to down|up state       Pos = Prioritize POS over Control\n    NA = Can improve reliability\n    Xn|Yn = Sets x|y coordinate to click. Relative to control's upper-left corner.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlClick, x10 y10, ahk_exe MyProg.exe, , Left, 2, NA Pos
ControlFocus, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Sets focus to the specified control.\nCONTROL: Name|Text of control. Uses SetTitleMatchMode.\nREMARK: If Control is blank, the window's top most control is used.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlFocus, Btn1, ahk_exe MyProg.exe
ControlGet   \nControlGet, OutputVar, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Retrieves various types of information about a control.\nSUBCOMMAND:\n    HWND = Get control handle.                  Checked = 1=Checked    0=Not checked\n    Choice = Get selected ListBox|ComboBox      Visible = 1=Visible    0=Not visible\n    Tab = Get SysTabControl32 tab number        Enabled = 1=Enabled    0=Not enabled\n    Line = Get text of Edit control line        Selected = Get Edit control selected text\n    CurrentCol = Get col number of Edit caret   CurrentLine = Get line number of Edit caret\n    LineCount = Get number of Edit control lines\n    List = Get list from: ListView|ListBox|ComboBox|DropDownList\n    Style|ExStyle = Get 8-digit hex number for the control's Style|ExStyle\n    FindString = Get number of ListBox|ComboBox that exactly matches string Value\nErrorLevel+EXO: 0 = Success. 1 = Failure.
ControlGet,List   \nControlGet, OutputVar, List, [Options, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, List, [Options, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Retrieves a list of items from a ListView|ListBox|ComboBox|DropDownList.\nOPTIONS: BLANK = All text. Lines are Linefeed separated. Fields are tab separated\n    These options only apply to ListView. Space|Tab separated\n    Selected = Get selected rows. BLANK = None\n    Focused = Get focused row. BLANK = None\n    ColN = Get Nth column instead of all\n    Count = Get number of rows in control\n    Count Selected = Get number of selected rows in control\n    Count Focused = Get number of focused row. 0 if none\n    Count Col = Get number of columns in control. -1 = Undetermined\nErrorLevel+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.\nEX: ControlGet, LVList, List,, LV1, ahk_exe MyProg.exe
ControlGet,Checked   \nControlGet, OutputVar, Checked, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Checked, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Check to see if a radio button|checkbox is checked.\nOUTPUTVAR: 1 = Checked    0 = Not checked\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, radio2_2, Checked,, Radio22, ahk_exe MyProg.exe
ControlGet,Enabled   \nControlGet, OutputVar, Enabled, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Enabled, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Check if a control is enabled.\nOUTPUTVAR: 1 = Enabled    0 = Disabled\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, BtnStatus, Enabled,, Btn1, ahk_exe MyProg.exe
ControlGet,Visible   \nControlGet, OutputVar, Visible , [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Visible , [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Check if a control is visible.\nOUTPUTVAR: 1 = Visible    0 = Hidden\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, btnVisState, Visible,, Btn1, ahk_exe MyProg.exe
ControlGet,Tab   \nControlGet, OutputVar, Tab, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Tab, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the tab number of a control.\nOUTPUTVAR: 1 = Tab 1    2 = Tab 2    Etc...\nREMARK: To get total tabs, see: SendMessage, 0x1304\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, thisTab, Tab,, Btn1, ahk_exe MyProg.exe
ControlGet,FindString   \nControlGet, OutputVar, FindString, String [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, FindString, String [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get entry number of ListBox|ComboBox that matches String.\nOUTPUTVAR: Number of matching entry.\nErrorLevel+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.\nEX: ControlGet, lbNum, FindString, AutoHotkey, LB1, ahk_exe MyProg.exe
ControlGet,Choice   \nControlGet, OutputVar, Choice, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Choice, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the name of the selected ListBox|ComboBox entry.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, cbActiveItem, Choice ,, CB1, ahk_exe MyProg.exe
ControlGet,LineCount   \nControlGet, OutputVar, LineCount, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, LineCount, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get number of lines in an Edit control.\nREMARK: An empty control still has 1 line.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, editLineNum, LineCount, , Edit2, ahk_exe MyProg.exe
ControlGet,CurrentLine   \nControlGet, OutputVar, CurrentLine, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, CurrentLine, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the line number of the caret in an Edit control.\nREMARK: If text is highlighted, line of highlight start is used.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, edit1Caret, CurrentLine, , Edit2, ahk_exe MyProg.exe
ControlGet,CurrentCol   \nControlGet, OutputVar, CurrentCol, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, CurrentCol, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the col number of the caret in an Edit control.\nREMARK: If text is highlighted, col of highlight start is used.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, edit1Caret, CurrentCol, , Edit2, ahk_exe MyProg.exe
ControlGet,Line   \nControlGet, OutputVar, Line, N [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Line, N [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get Nth line of text from an Edit control.\nErrorLevel+EXO: 0 = Success. 1 = Failure|line not exist. OutputVar = BLANK.\nEX: ControlGet, editLineInfo, Line, 5, Edit2, ahk_exe MyProg.exe
ControlGet,Selected   \nControlGet, OutputVar, Selected, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Selected, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get selected text from an Edit control.\nREMARK: If no text is selected, ErrorLevel = 0 and OutputVar = BLANK\nErrorLevel+EXO: 0 = Success. 1 = Failure|no text selected.\nEX: ControlGet, editSelected, Selected, , Edit2, ahk_exe MyProg.exe
ControlGet,Style   \nControlGet, OutputVar, Style, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, Style, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the 8-digit hex number of the control's style.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, btnStyle, Style, , btn2, ahk_exe MyProg.exe
ControlGet,ExStyle   \nControlGet, OutputVar, ExStyle, [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, ExStyle, [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the 8-digit hex number of the control's extended style.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, btnExStyle, ExStyle, , btn2, ahk_exe MyProg.exe
ControlGet,HWND   \nControlGet, OutputVar, HWND , [, Control, WinTitle, WinText, NotTitle, NotText]\nControlGet, OutputVar, HWND , [, Control, WinTitle, WinText, NotTitle, NotText]\nUSE: Get the handle (HWND) of the control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, gui2Btn2HWND, HWND, , btn2, ahk_exe MyProg.exe
ControlGetFocus, OutputVar [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the identifier of the control that currently has focus. If any.\nErrorLevel+EXO: 0 = Focused control found. 1 = Failure.\nEX: ControlGetFocus, conFocusName, ahk_exe MyProg.exe
ControlGetPos, [outX, outY, outW, outH, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the X|Y coordinates, height, and width of a control.\nOUT: Output variables for XY coords and width|height.\nREMARK: Output will be BLANK if no window or control is found.\nEX: ControlGetPos, x, y, w, h, btn1, ahk_exe MyProg.exe
ControlGetText, OutputVar, [Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Get text from a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlGetText, ddlTxt, DDL1, ahk_exe MyProg.exe
ControlMove, Control, X, Y, Width, Height, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Moves or resizes a control.\nX|Y|Width|Height: Set the X|Y coords and the Width|Height of the control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlMove, Btn1, 10, 10, 50, 25, ahk_exe MyProg.exe
ControlSend, [Control, Keys, WinTitle, WinText, NotTitle, NotText]   \nUSE: Sends simulated keystrokes directly to a window or control.\nKEYS: Keys to send. Use same syntax as a Send field.\nREMARK: ahk_parent sends keys directly to the window instead of a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlSend,, SciTE, ahk_exe MyProg.exe
ControlSendRaw, [Control, Keys, WinTitle, WinText, NotTitle, NotText]   \nUSE: Sends simulated keystrokes directly to a window or control.\nKEYS: Keys to send. Text is sent as typed. Same as: Send, {Raw}\nREMARK: ahk_parent sends keys directly to the window instead of a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlSend, Edit1, Some Text, ahk_exe MyProg.exe
ControlSetText, [Control, NewText, WinTitle, WinText, NotTitle, NotText]   \nUSE: Update a control's text to NewText.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: ControlSetText, Edit1, SciTE, ahk_exe MyProg.exe
CoordMode, Type, [Area := Screen]   \nUSE: Sets which corner x0 y0 starts at.\nTYPE: What each type affects:\n    Tooltip = Tooltip\n    Caret   = A_CaretX|A_CaretY\n    Menu    = Menu Show command\n    Pixel   = PixelGetColor|PixelSearch|ImageSearch\n    Mouse   = MouseGetPos|Click|MouseClick|MouseDrag|MouseMove\nAREA:\n    Screen = Entire screen/desktop.\n    Window = Whole window including OS Menu|TitleBar|Borders\n    Client = Program area. Does not include OS Menu|TitleBar|Borders\nEX: CoordMode, Mouse, Relative
Critical, [State]   \nUSE: Prevents or enables interruption of the current thread.\nSTATE:\n    ON  = Thread is critical and cannot be interrupted.\n    OFF = Thread is not critical and can be interrupted.\n    N   = Thread is critical. Check message queue every N milliseconds.
DetectHiddenText, On|Off   \nUSE: Hidden text in a window can|cannot be seen by the script.\nON|OFF: 1 and 0 can be used.
DetectHiddenWindows, On|Off   \nUSE: Hidden windows can|cannot be seen by the script.\nON|OFF: 1 and 0 can be used.
Drive   \nDrive, SubCommand, [DriveLetter, Value2]\nDrive, SubCommand, [DriveLetter, Value2]\nUSE: Optical drive commands.\nSUBCOMMANDS:\n    Eject = Ejects drive                Label = Rename drive label\n    Lock = Disables drive eject         Unlock = Enables drive eject\nErrorLevel+EXO: 0 = Success. 1 = Failure.
Drive,Label, DriveLetter, [NewLabel]   \nUSE: Changes the Label of DriveLetter.\nDRIVELETTER: Drive's letter followed by a colon.\nNEWLABEL: If BLANK, drive will have no label.\nREMARK: To get current label, use: DriveGet, OutputVar, Label, DriveLetter\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: Drive, Label, C:, MainDrive
Drive,Lock, DriveLetter   \nUSE: Disable a drive's ability to eject.\nDRIVELETTER: Drive's letter followed by a colon.\nREMARK: Has no effect on drives that do not support locking\nErrorLevel+EXO: 0 = Success. 1 = Failure|Drive not Exist|Drive not lockable
Drive,Unlock, DriveLetter   \nUSE: Enable a drive's ability to eject.\nDRIVELETTER: Drive's letter followed by a colon.\nREMARK: Has no effect on drives that do not support locking\n    Some drives may need multiple unlocks if multiple locks were issued.\nErrorLevel+EXO: 0 = Success. 1 = Failure.
Drive,Eject, [DriveLetter, Open]   \nUSE: Eject|retracts the tray of an optical drive.\nDRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.\nOPEN: 1 = Retract drive. BLANK = Eject drive.\nREMARK: Ejecting other media has to be done through DllCalls. See docs.
DriveGet   \nDriveGet, OutputVar, SubCommand, [Value]\nDriveGet, OutputVar, SubCommand, [Value]\nUSE: Retrieves various types of information about the computer's drives.\nSUBCOMMANDS:\n    Status = Get path's status          List = Get string of drive letters\n    Type = Get path's drive type        Capacity = Get path's capacity in MB\n    Label = Get drive's volume label    StatusCD = Get optical drive status\n    FileSystem = Get file system type of drive\n    Serial = Get drive's volume serial number\nErrorLevel+EXO: 0 = Success. 1 = Failure.
DriveGet, OutputVar, List, [Type]   \nUSE: Returns a string of system drive letters.\nTYPE: If omitted, all drives are retrieved. Otherwise:\n    CDROM|REMOVABLE|FIXED|NETWORK|RAMDISK|UNKNOWN\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveLetters, List, [Type] ; V=> CDEFXYZ
DriveGet, OutputVar, Cap|Capacity, Path   \nUSE: Get the total capacity of Path in megabytes.\nPATH: Drive path.\nREMARK: If you need to get free space, use: DriveSpaceFree\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveCap, Cap, C:\\ ; V=> 228740
DriveGet, OutputVar, FS|FileSystem, Drive   \nUSE: Get the type of file system used by Drive.\nDRIVE: Drive letter or UNC\n    C:      Z:\\     \\\\Server1\\Share\nOUTPUTVAR: File system types: FAT|FAT32|NTFS|CDFS|UDF\nErrorLevel+EXO: 0 = Success. 1 = Failure. BLANK = Drive has no formatted media.\nEX: DriveGet, driveFsType, FS, C: ; V=> NTFS
DriveGet, OutputVar, Label, Drive   \nUSE: Get volume label of Drive.\nDRIVE: Drive letter or UNC\n    C:      Z:\\     \\\\Server1\\Share\nREMARK: To change the drive's label, see: Drive, Label\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveLabel, Label, c:\\ ; V=> MainDrive
DriveGet, OutputVar, Serial, Drive   \nUSE: Get the volume serial number for Drive.\nOUTPUTVAR: Output is a decimal integer.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveSerial, Serial, Drive ; V=> 2151283365
DriveGet, OutputVar, Type, Path   \nUSE: Get the drive type of Path.\nOUTPUTVAR: Removable|Fixed|Network|CDROM|RAMDisk|Unknown\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveType, Type, C:\\ ; V=> Fixed
DriveGet, OutputVar, Status, Path   \nUSE: Retrieves Path's status.\nOUTPUTVAR: Status types: Unknown(Possibly RAW)|Ready|NotReady|Invalid\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveStatus, Status, C: ; V=> Ready
DriveGet, OutputVar, StatusCD, [DriveLetter]   \nUSE: Get the status of an optical drive.\nOUTPUTVAR: Not Ready|Open|Playing|Paused|Seeking|Stopped\n    BLANK = Status indeterminable\nDRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, dvdStatus, StatusCD, E: ; V=> Stopped
DriveSpaceFree, OutputVar, Path   \nUSE: Get Drive's free disk space in megabytes.\nEX: DriveSpaceFree, freeSpace, C: ; V=> 147455
Edit   \nUSE: Open current script in the associated editor.\nREMARK: Edit association is a registry setting.\n    See: HKCR\\AutoHotkeyScript\\Shell\\Edit\\Command
EnvAdd, Var, Value, [TimeUnit]   \nUSE: Add Value to Var. Store results in Var.\nVAR: Variable to operate on.\nVALUE: Number. Integer, float, or expression.\nTIMEUNITS: If Var is an empty variable, A_Now is used.\n    Types = S|Seconds    M|Minutes    H|Hours    D|Days\n    If present, Var is treated as a YYYYMMDDHH24MISS timestamp\nREMARK: To subtract a number, use a negative Value.\n    Synonymous with: Var += Value\nEX: var := A_Now       ; Set var to time right now and add 50 days\n    EnvAdd, Var, 50, D ; V=> 20181007022250
EnvGet, OutputVar, EnvName   \nUSE: Get an environment variable.\nENVNAME: Name of environmental variable.\nEX: EnvGet, OutputVar, ProgramW6432 ; Gets the x64 program files directory
EnvSet, EnvVar, Value   \nUSE: Writes a value to a variable contained in the environment.\nREMARK: Windows limits environment variables to 32 KB of text.\nErrorLevel+EXO: 0 = Success. 1 = Failure.
EnvSub, Var, Value, [TimeUnit]   \nUSE: Subtract Value from Var. Stores result in Var.\nTIMEUNIT: When present, Var & Value are both treated as YYYYMMDDHH24MISS\n    If either are blank, A_Now is used.\nREMARK: If Var returns BLANK, it's because:\n    Invalid timestamp.  Year is before 1601.  Value not a number.\nEX: utc := A_NowUTC, loc := A_Now ; Set local and UTC times\n    EnvSub, loc, % utc, H         ; Get the difference between the two
EnvUpdate   \nUSE: Notify OS and all running apps an environment variable has changed.\nErrorLevel+EXO: 0 = Success. 1 = Failure.
ExitApp [ExitCode]   \nUSE: Shuts down and closes script.\nEXITCODE: Number. -2147483648 .. 2147483647\nREMARK: Immediately terminates script. Runs OnExit functions if present.
FileAppend, [Text, *|[*]Filename, Encoding]   \nUSE: Writes text to the end of a file. Creates file if one doesn't exist.\nFILENAME: Name of the file to write to.\n    * Prefix: Writes CR+LF as LF\n    * : Using just * sends text to StdOut\nENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nREMARK: For continuous writing, consider FileOpen()\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileAppend, % "Hello World!", C:\\Text.txt, UTF-16
FileCopy, Source, Destination, [Overwrite:=0]   \nUSE: Copy one or more files to Destination.\nSOURCE: The path of a file or folder. Wildcards are allowed.\nDESTINATION: The path of a file or folder to copy to.\nOVERWRITE: 1 = Overwrite    0 = Do not overwrite\nREMARK: This is for files only. For whole directors, see: FileCopyDir\nErrorLevel+EXO: 0 = Success. 1+ = Number of files that failed to copy.\nEX: FileCopy, D:\\Scripts\\*.ahk, E:\\Backup, 1 ; Backup all AHK scripts
FileCopyDir, Source, Destination, [Overwrite:=0]   \nUSE: Copy folder, and optionally subfolders, to Destination.\nSOURCE: Path to source directory. No trailing backslash.\nDESTINATION: Path to destination directory. No trailing backslash.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nREMARK: If the folder structure doesn't exist, it will be created.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileCopyDir, D:\\Scripts, E:\\Backup, 1 ; Backup Scripts folder
FileCreateDir, DirName   \nUSE: Creates a directory/folder .\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileCreateDir, C:\\TestFolder
FileCreateShortcut, Target, Link, [Dir, Args, Desc, Icon, Shortcut, IconNum, State]   \nUSE: Creates a shortcut (.lnk) file to Target with.\nTARGET: File to make shortcut for       LINK: Path and name of shortcut\nDIR: Provide an working directory       ARGS: Space separated args for Target\nDESC: Shortcut description              SHORTCUT: Single letter hotkey\nICON: Path to shortcut's icon           ICONNUM: Icon number if icon file\nSTATE: 1 = Normal  3 = Maximized  7 = Minimized\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileCreateShortcut, C:\\Windows\\Explorer, % A_Desktop "\\Explorer.lnk"
FileDelete, FilePattern   \nUSE: Deletes one or more files.\nFILEPATTERN: Path to a file. Wildcards allowed.\nErrorLevel+EXO: 0 = Success. 1+ = Number of files failed to be deleted.\nEX: FileDelete, % A_Desktop "\\TestFile.txt"
FileEncoding, [Encoding]   \nUSE: Sets default encoding for the following:\n    FileRead    FileReadLine    Loop-Read    FileAppend    FileOpen\nENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nEX: FileEncoding, UTF-8
FileGetAttrib, OutputVar, [Filename]   \nUSE: Get attributes of a file.\nOUTPUTVAR: String. D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory     O = Offline     N = Normal     T = Temporary\n    C = Compressed    R = ReadOnly    A = Archive    S = System\n    H = Hidden        X = No Attr     BLANK = No file found\nFILENAME: Path and file to get attributes from.\nREMARK: Remember: DONT CRASH X\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileGetAttrib, fileAttribs, % A_ScriptFullPath ; Get current scripts attributes
FileGetShortcut, Link, [OutTarget, OutDir, OutArgs, OutDesc, OutIcon, OutIconNum, OutState]   \nUSE: Retrieves information about a shortcut (.lnk) file.\nLINK: Path to the shortcut\nOUT: Variables to store all the data from the shortcut\n    OutTarget = Target's path           OutArgs = Shortcut's arguments\n    OutDesc = Shortcut's description    OutDir = Target working directory\n    OutIcon = Path to shortcut's icon   OutIconNum = Shortcut's\n    OutState = 1 = Normal  3 = Maximized  7 = Minimized\nREMARK: Any Out variable can be omitted.\nErrorLevel+EXO: 0 = Success. 1 = Failure and all Out files = BLANK.\nEX: FileGetShortcut, C:\\test.lnk, outTar, outDir, , , OutIcon
FileGetSize, OutputVar, [Filename, Units]   \nUSE: Get the size of a file.\nUNITS: BLANK = Bytes. K = Kilobytes. M = Megabytes.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileGetSize, scriptSize, % A_ScriptFullPath, K ; V=> 2
FileGetTime, OutputVar, [Filename, TimeType:=M]   \nUSE: Get the date timestamp of a file or folder in YYYYMMDDHH24MISS format.\nTIMETYPE: Type of timestamp to retrieve:\n    M = Modification time    C = Creation time    A = Last access time\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileGetTime, fileModTime, C:\\Test.txt, M ; Get modification time of test.txt
FileGetVersion, OutputVar, [Filename]   \nUSE: Retrieves the version of a file.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nREMARK: If file has no version, OutputVar is BLANK.\nEX: FileGetVersion, fileVer, C:\\Windows\\Explorer.exe ; V=> 6.1.7601.23537
FileInstall, Source, Dest, [Overwrite:=0]   \nUSE: Includes files inside of a compiled exe.\nSOURCE: Path to the file to include.\n    Path must not contain double quotes, variable references, or wildcards.\nDEST: Destination to put source on file extraction\n    Unlike source, this path can use variable references.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nREMARK: Uncompiled files perform a simple copy. This makes testing much easier.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileInstall, icon.ico, % A_AppData "\\MyProgFiles\\", 1
FileMove, Source, Dest, [Overwrite]   \nUSE: Move or rename file(s).\nSOURCE: The path to a file. Wildcards allowed.\nDEST: path to destination.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileMove, C:\\Test.txt, C:\\Test.ahk, 1 ; Rename test.txt to test.ahk
FileMoveDir, Source, Dest, [Flag:=0]   \nUSE: Move|rename a folder and it's sub-folders and files.\nSOURCE: Name of the source directory. No trailing spaces.\nDEST: New path and name of directory. No trailing spaces.\nFLAG: One of the following single characters:\n    0 = Do not overwrite existing files.\n    1 = Overwrite existing files.\n    2 = Same as 1 except prevents a known limitation. See the docs.\n    R = Rename directory instead of moving it.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileMoveDir, D:\\Scripts, D:\\Backup, 1 ; Backup scripts dir
FileRead, OutputVar, Filename   \nUSE: Reads a file's contents into a variable.\nFILENAME: Name of file. Can include these prefixed options separated by spaces:\n    *c: Load binary data like ClipboardAll\n    *mN: Max file size in N bytes\n    *t: Replaces CR+LF with LF.\n    *Pnnn: Set FileEncoding identifier where nnn = numeric code page identifier.\nREMARK: If file greater than 1 GB, ErrorLevel = 1 and OutputVar = BLANK\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileRead, txtVar, C:\\Test.txt
FileReadLine, OutputVar, Filename, LineNum   \nUSE: Read a line of text from a file into a variable.\nREMARK: Used for small files. For large files, see: FileRead() or Loop-Files\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileReadLine, txtVar, C:\\Test.txt, 2
FileRecycle, FilePattern   \nUSE: Sends a file or directory to the recycle bin, if possible.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileRecycle, C:\\Test.txt
FileRecycleEmpty, [DriveLetter]   \nUSE: Empties the recycle bin of all files.\nDRIVELETTER: If specified, only recycles files from that drive letter.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileRecycleEmpty, C:
FileRemoveDir, DirName, [Recurse:=0]   \nUSE: Deletes a folder.\nRECURSE: Choose to recursively remove files/folders from subdirectories\n    0 = Remove directory if no files or subdirectories exist.\n    1 = Recursively removes all files and directories, too.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileRemoveDir, D:\\TestFolder, 1
FileSelectFile, OutputVar, [Options:=0, Path, Prompt, Filter]   \nUSE: Displays an interface for the user to select a file|files.\nOPTIONS: Choose one: S = Changes Open to Save    M = Select multiple files\n    Include these with S, M, or by themselves. Add desired values together.\n        +1 =  File Must Exist           +2 =  Path Must Exist\n        +8 =  Create New File Prompt   +16 =  Prompt to Overwrite File\n       +32 =  Shortcuts use their own path and don't resolve to their targets.\nPATH: A directory, filename, or CLSID dialog starts at.\nPROMPT: Dialog window's title.\nFILTER: Filter file extensions. Format: Title(*.ext1; *.ext2; *.ext3; ...)\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileSelectFile, OutputVar, S27, D:\\Scripts,, Text (*.txt; *.ahk)
FileSelectFolder, OutputVar, [Path, Options:=1, Prompt]   \nUSE: Displays an interface for the user to select a folder from Path.\nPATH: A directory or CLSID to start at. An * can be prefixed to the path.\n    * indicates user can navigate upward toward root.\n    Without this, the user must choose Path or a directory in Path.\nOPTIONS: Use sum of desired options\n     0 = All options disabled\n    +1 = Allowed to create new folder\n    +2 = Enable edit bar for user to type/paste folder path\n    +4 = Omit the BIF_NEWDIALOGSTYLE property\nPROMPT: Dialog prompt.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileSelectFolder, folderPath, c:\\, 3, Pick a folder
FileSetAttrib, Attributes, [Path, Operate:=0, Recurse]   \nUSE: Set attributes of one or more files|folders.\nATTRIBUTES: Operators: +=Add    -=Remove    ^=Toggle\n    Attributes: D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory     O = Offline     N = Normal     T = Temporary\n    C = Compressed    R = ReadOnly    A = Archive    S = System\n    H = Hidden        X = No Attr     BLANK = No file found\nPATH: Path to a file or folder. Wildcards are allowed.\nOPERATE: 0 = Only files    1 = Files and folders that match    2 = Only folders\nRECURSE: 0 = No recursion    1 = Recurse into subdirectories\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileSetAttrib, +RC-O, [Path, Operate:=0, Recurse]
FileSetTime, [DTS, Path, TimeType, Operate, Recurse]   \nUSE: Change the date timestamp of one or more files|folders.\nPATH: Path to a file or folder. Wildcards are allowed.\nDTS: Date-timestamp. Format: YYYYMMDDHH24MISS\nTIMETYPE: Timestamp type to alter:\n    M = Modification time    C = Creation time    A = Last access time\nOPERATE: 0 = Only files      1 = Files & folders that match    2 = Only folders\nRECURSE: 0 = No recursion    1 = Recurse into subfolders\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: FileSetTime, 20181007045200, C:\\Test.txt, C, 1, 0
FormatTime, OutputVar, [DTS, Format]   \nUSE: Transform a YYYYMMDDHH24MISS date-timestamp into a custom Format.\nDTS: Date Time Stamp in. Uses YYYYMMDDHH24MISS format. Blank uses A_Now\nFORMAT: A string of characters, spacing, and any punctuation you want.\n  Year:   y = 0-99    yy = 00-99    yyyy = 2018       gg = Era: BC, AD, etc.\n  Month:  M = 1-12    MM = 01-12    MMM  = Jan-Dec    MMMM = January-December\n  Day:    d = 1-31    dd = 01-31    ddd  = Sun-Sat    dddd = Sunday-Saturday\n  Hour:   H = 0-24    HH = 00-24    h    = 1-12       hh = 01-12\n  Minute: m = 0-59    mm = 00-59    tt   = AM-PM\n  Second: s = 0-59    ss = 00-59    t    = A-P\n  STANDALONE: Alternately, use a preset. Uses locale (Window's format)\n  Time  = Hour:Minute [Period]        LongDate  = dddd, MMMM Day, yyyy\n  BLANK = Time LongDate               ShortDate = Month/Day/Year\n  YearMonth = MMMM, yyyy\n  YDay  = Day of year. 1-366          YDay0 = Day of year. 001-366\n  YWeek = Year and week number        WDay  = Day of week. 1-7. 1=Sunday\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nREMARK: There are too many options to list. See docs for full list.\nEX: FormatTime, timeF, % A_Now, HH:mm dddd, MMMM dd, yyyy ; Same as A_Now
GroupActivate, GroupName, [Mode:=""]   \nUSE: Activates the next window in a window group.\nGROUPNAME: A defined list of windows. See: GroupAdd\nMODE: R = Activate last active window    BLANK = Activate oldest window\nEX: GroupActivate, tabGroup, R
GroupAdd, GroupName, [WinTitle, WinText, Label, NotTitle, NotText]   \nUSE: Adds matching window to GroupName.\nLABEL: A label to run if no window is matched.\nREMARK: Groups are used by other commands like GroupActivate.\nEX: GroupAdd, browserGroup, ahk_exe chrome.exe,, NoMatchSub
GroupClose, GroupName, [Mode:=""]   \nUSE: Closes next|all windows. Behavior based on mode.\nMODE: BLANK = Close active window. Activate oldest window in group.\n    A = All existing group members are closed.\n    R = GroupDeactivate last used = Closes active window if not a group member\n        GroupActivate last used = Closes active window if it is a group member\nEX: GroupClose, winGroup, A
GroupDeactivate, GroupName, [Mode]   \nUSE: Activates next window in the stack if it does not belong to GroupName.\nMODE: R = Next non-group window    BLANK = Oldest non-group window\nEX: GroupDeactivate, GroupName, R
Gui   \nGui, SubCommand, [Value1, Value2, Value3]\nGui, SubCommand, [Value1, Value2, Value3]\nUSE: Used to create, destroy, format, and manipulate Graphical User Interfaces.\nSUBCOMMANDS:\n    New = New GUI                   Destroy = Deletes GUI\n    Show = Make GUI visible         Cancel|Hide = Make GUI Hidden\n    Add = Add a control to GUI      Submit = Save all control data to variables\n    Margin = Default padding size   Color = Sets background|control color\n    Menu = Add|remove menu bar      Flash = Blink window|taskbar button\n    Minimize|Maximize|Restore = GUI resizing options\n    Default = Set default GUI name for current thread\n    Font = Sets default font|color|size|style for future controls\nErrorLevel+EXO: 0 = Success. 1 = Failure.
Gui,New, [Options, Title]   \nUSE: Create a new GUI and sets new GUI to thread default.\nEX: Gui, MyGUI:New, HWNDguiH\nOPTIONS: Use +|- to Add|Remove any of these options.\n    AlwaysOnTop = Window always on top      Border = Thin-line border\n    Delimiter = Set GUI control delimiter   Disabled = Disable window\n    DPIScale = Scale GUI with DPI           HWNDvar = Store GUI HWND to var\n    Label = Change GUI Label prefix         LastFound = Set GUI to LastFound\n    MaximizeBox = Maximize button           MinimizeBox = Minimize button\n    MaxSize = Maximum window size           MinSize = Minimum window size\n    Owner = Set windows owner               OwnDialogs = Own popup dialogs\n    Parent = Set parent of this window      Resize = Set resizability\n    Style = Window Style                    ExStyle = Window Extended Style\n    SysMenu = System menu & buttons         Theme = Sets normal|classic theme\n    LastFoundExist = Set GUI to LastFound only if GUI exists\n    ToolWindow = Narrower title bar & no taskbar button\nREMARK: A new GUI destroys an old GUI of the same name.\nCHEAT: See: Cheat_GUI_Options and Cheat_Styles\nEX: Gui, MyGUI:New, +Resize -Border -SysMenu, Clever GUI Title
Gui,Add,ControlType, [Options, Text]   \nUSE: Adds a control to a GUI window.\nREMARK: If no GUI exists, one is created.\nCONTROLTYPE:\n    ActiveX     DropDownList    ListView    StatusBar\n    Button      Edit            MonthCal    Tab\n    Checkbox    GroupBox        Picture     Text\n    ComboBox    Hotkey          Progress    TreeView\n    Custom      Link            Radio       UpDown\n    DateTime    ListBox         Slider
Gui,Add,Text, [Options, Value]   \nUSE: A control that displays Value's text.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nEX: Gui, MyGui:Add, Text, x100 y100 w50 h20, Hello World
Gui,Add,Edit, [Options, Text]   \nUSE: A control that can accept text input from the user.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Number = Numbers only          -Wrap = Disable word wrapping\n    ReadOnly = Fixed text          -WantCtrlA = Disable SelectAll\n    Lowercase = force lowercase    Uppercase = FORCE UPPERCASE\n    LimitN = Limit to N chars      Limit = Limit input to control width\n    tN =  Tabstop in N chars       -WantTab = Tab navigate\n    Password = Mask user input     Password* = Change mask. * is any char\n    Multi = Multiple lines         -WantReturn = Disable linefeed from enter\nTEXT: Default text to appear inside edit box.\nEX: Gui, MyGui:Add, Edit, w100 h20 Number Limit, Default text here.
Gui,Add,UpDown, [Options, Start]   \nUSE: Attach up|down arrows to a control that increase|decrease a value.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Horz = UpDown become LeftRight      Left = Move UpDown left of control\n    Range = Set range N1 to N2          Wrap = Wraps range min and max\n    -16 = Prevent control attach        0x80 = Omit thousands separator\nSTART: Starting value. Overrides attached controls value.\nEX: Gui, MyGui:Add, Edit,, 1\n    Gui, MyGui:Add, UpDown, vGuiEditUD gUDSub Range1-100 Wrap, 5
Gui,Add,Picture, [Options, ImagePath]   \nUSE: Imports a supported image to the GUI.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nEX: Gui, Add, Picture, x10 y10 w500 vGuiPic, C:\\Images\\GuiPic.png
Gui,Add,Button, [Options, Text]   \nUSE: Creates a clickable, basic button.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nTEXT: Text that appears on the button.\nEX: Gui, Add, Button, x5 y90 w50 h20 vGuiBtn gSubmit, Submit
Gui,Add,Checkbox, [Options, Text]   \nUSE: A box that can be set to check, unchecked, or filled.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Check3 = Enables a 3rd checkstate\n    Checked|CheckedGray = Start in 3rd check state\n    Right|Left = Side to put checkbox on\nTEXT: Value that appears next to checkbox.\nEX: Gui, Add, Checkbox, x5 y5 vGuiCheck gCBUpdate Check3 Right, Enable
Gui,Add,Radio, [Options, Text]   \nUSE: A checkable element groups. Only 1 radio button can be active per group.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Group =  Specifies a new radio group\nTEXT: Value that appears next to checkbox.\nEX: Gui, Add, Radio, x20 y5 w40 h20 vGuiR1 Group, Yes\n    Gui, Add, Radio, x70 y5 w40 h20 vGuiR2, No
Gui,Add,DropDownList, [Options, List]   \nUSE: An element that expands to reveal a list. Only 1 item can be selected.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Lowercase = force lowercase\n    Uppercase = FORCE UPPERCASE\n    ChooseN = Item N starts selected\n    Sort = Automatically sorts list alphabetically. Also allows type-to-select\nLIST: A pipe separated list of items. Set default item with 2 pipes after it.\nEX: Gui, Add, DropDownList, x5 y5 w50 Sort, Bin|Oct|Dec||Hex|
Gui,Add,ComboBox, [Options, List]   \nUSE: Same as a drop down list except it also has an editable field.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Limit = Limit input to viewable area\n    Simple = Combo box's drop down list is replaced with a ListBox\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, Add, ComboBox, x5 y5 w100 vGuiCB Simple Limit, Add|Sub||Mult|Div|
Gui,Add,ListBox, [Options, List]   \nUSE: Displays a list of items where 1 or more items can be selected.\nOPTIONS: See Cheat_GUI_Options for general options.\n    ChooseN = Item N starts selected\n    Multi = Multiple selections\n    ReadOnly = Non-interactive\n    Sort = Automatically sorts list alphabetically\n    0x100 = Prevents row cutoff\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, Add, ListBox, x5 y5 w50 r5 vGuiLB1 Multi, Red||Green|Blue||Alpha
Gui,Add,ListView, [Options[ViewMode], List]   \nUSE: An element that can list multiple rows and columns of data.\nOPTIONS: See Cheat_GUI_Options for general options.\n    R = Rows on creation              C = Text color. Use Hex|Name\n    -Hdr = Omit header                NoSortHdr = Header becomes a field\n    -Multi = Max select 1 row         LV0x10 = Disable rearranging columns\n    Grid = Row|col lines              AltSubmit = Gets more ListView events\n    Sort = Auto sort by first col     LV0x20 = Click first col to select row\n    -WantF2 = Prevent F2 renaming     Checked = Add checkboxes to left of row\n    -ReadOnly = First col editable    NoSort = Disable sorting by header click\n    Count = Initial number of rows    SortDesc = Auto sort descending by first col\n    LV = Add or remove a ListView Extended Style\n    Background = Set background color. Use Hex|Name\nVIEWMODE: One view mode can be added to the options field\n    Report = Default view               Tile = Alt large icon view\n    Icon = Large icon view              IconSmall = Small icon view\n    List = Listed small icon view\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, MyGui:Add, ListView, x5 y5 r10 w400 vGuiLV Grid, Name|Weight(LB)|Height
Gui,Add,TreeView, [Options]   \nUSE: An element that can show a parent/child hierarchy. Like Explorer's file view\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    R = Rows on creation            AltSubmit = Additional events\n    Checked = Enable checkbox       -WantF2 = Prevent F2 renaming\n    -Buttons = Disable +/- box      C = Text color. Use Hex|Name\n    -ReadOnly = Allow renaming      -Lines = Disable parent-child lines\n    ImageList = Add ImageListID     -HScroll = Remove horizontal scroll bar\n    Background = Set background color. Use Hex|Name\nGui, Add, TreeView, w200 r20 vGuiTV Background0x959595
Gui,Add,Link, [Options, Text[Tag]]   \nUSE: Creates text that does something when clicked (hypertext).\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\nTEXT: Regular text that can contain HTML HREF tags.\nEX: Gui, Add, Link, x5 y5, Click <a href="https://autohotkey.com">here</a>
Gui,Add,Hotkey, [Options, Default]   \nUSE: A control that detects and stores the keys a user presses.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    LimitN = Restrict hotkey types. N = Sum of options:\n        1 = Require a modifier key    16 = No Shift+Control keys\n        2 = No Shift-only keys        32 = No Shift+Alt keys\n        4 = No Control-only keys      64 = Do not use. Not supported\n        8 = No Alt-only keys          128 = No Shift+Control+Alt keys\nDEFAULT: Set a default hotkey. Accepts mod notation: !^+\nEX: Gui, MyGui:Add, Hotkey, x5 y5 w90 vGuiHK1, ^+A
Gui,Add,DateTime, [Options, Format]   \nUSE: A single line input box that accepts dates or time. Has a calendar drop-down.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    Choose = Preselect a YYYYMMDDHH24MISS date\n    Range = Set min/max date to YYYYMMDD-YYYYMMDD\n    Right = Set calendar drop-down to right side\n    1 = Provide UpDown control    2 = Provide a no date/time checkbox\nFORMAT:\n    BLANK = Locale short date     LongDate = Use locale long date\n    Time = Time only              Custom = Custom date. See: FormatTime\nEX: Gui, Add, DateTime, x5 y5 Right 2 vGuiDTS, yyyyMMdd
Gui,Add,MonthCal, [Options, Default]   \nUSE: An calendar element that allows single or range date selecting.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    rN = N rows of calendars       w-N = Columns of calendars. Negative number.\n    4 = Display week numbers       8 = Disable circling todays date\n    16 = Disable showing todays date\n    Multi = Allows date range selection\n    Range = Set min/max date to YYYYMMDD-YYYYMMDD\nDEFAULT: Set the default start date in YYYYMMDDHH24MISS format.\nEX: Gui, Add, MonthCal, vGuiCal r2 w-2
Gui,Add,Slider, [Options, Start]   \nUSE: A button on a track that can change a value by sliding it.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    Center = Blunt thumb                    ToolTip = Tooltip shows position\n    ThickN = N thumb thickness in pixels    Vertical = Slider is vertical\n    Left = Thumb points to opposite side    Invert = Switch min/max sides\n    NoTicks = No tick marks                 PageN = Move N positions on PageUp|Dn\n    TickIntervalN = Set tick mark interval  LineN = Move N positions on arrow press\n    RangeN1-N2 = Set range from N1 to N2\n    Buddy1N|Buddy2N = Attach control N to left|right side of slider\nSTART: Starting position of slider. If omitted, defaults to number closest 0.\nEX: Gui, Add, Slider, Thick15 TickInterval25 Range0-200 vGuiSL, 100
Gui,Add,Progress, [Options, Start]   \nUSE: A dual colored bar that can track forms of progress.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    cN = Bar color. N = Hex|ColorName\n    BackgroundN = BG color. N = Hex|ColorName\n    RangeN1-N2 = Set range from N1 to N2\n    -Smooth = Segmented bar\n    Vertical = Fill vertically\nSTART: Starting number. If omitted, defaults to number closest 0.\nEX: Gui, Add, Progress, vGuiPr c00FF00 -Smooth BackgroundBlack Range0-10, 5
Gui,Add,GroupBox, [Options, Text]   \nUSE: An element used to visually group things. This is a visual element only.\nOPTIONS:\n    Wrap = Allow more than 1 line of text\nEX: Gui, Add, Button, x15 y35 w50 h20, OK\n    Gui, Add, GroupBox, x5 y5 w70 h60 Wrap, Group`nBox
Gui,Add,Tab3|Tab2|Tab, [Options, Text]   \nUSE: Creates a page|tab. Each page can contain its own set of controls.\nTAB: TAB=Original tab    TAB2=Fixed some TAB issues    TAB3=Fixed Tab2 issues\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    ChooseN = Preselect a tab N\n    -Background = Use default color for tab\n    Buttons = Replace tabs with buttons\n    Left|Right|Bottom|Top = Tab location\n    -Wrap = Force single tab row\nEX: Gui, Add, Tab3, x5 y5 w200 h200 Choose2 vGuiTabs, Tab1|Tab2|Tab3
Gui,Add,StatusBar, [Options, Text]   \nUSE: An element anchored to the bottom of the GUI for displaying info.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    No unique commands but this element does utilize 3 built-in functions:\n    SB_SetText() = Set text in the status bar\n    SB_SetParts() = Split/unite parts of the status bar\n    SB_SetIcon() = Insert icons into the status bar\nREMARK: Can be split into multiple sections.\nEX: Gui, Add, StatusBar, vGuiSB, Status bar text
Gui,Add,ActiveX, [Options, Text]   \nUSE: Allows the import of ActiveX controls. Like IE.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.
Gui,Add,Custom, [ControlDefinedParams]   \nUSE: Allows the import of other controls not provided by AHK.
Gui,Show, [Options, Title]   \nUSE: Show, hide, position, and title a GUI.\nOPTIONS:\n    Wn = GUI widh in n pixels        Hn = GUI height in n pixels\n    Xn = Set GUI x coord             Yn = Set GUI y coord\n    xCenter = Center horizontally    yCenter = Center vertically\n    Center = Center on screen        Restore = Regular GUI size\n    Minimize = Minimize GUI          Maximize = Maximize GUI\n    Hide = Hide GUI                  AutoSize = Minimum size to fits all controls\n    NoActivate = Regular view. No activation.\n    NA = Show unminimized window. No activation.\nEX: Gui, MyGui:Show, x5 y5 w400 h200 Center, My New GUI
GuiClose   \nUSE: Label that launches when a GUI is closed.\nREMARK:If this label does not exist, closing the GUI will hide it.\n    Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: Consider using: GuiClose()
GuiEscape   \nUSE: Label that launches when the GUI detects Escape being pressed.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: Consider using: GuiEscape()
GuiSize   \nUSE: Label that launches when the GUI window is resized.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: Consider using: GuiSize()
GuiContextMenu   \nUSE: Label that launches whenever the user right-clicks inside the GUI.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: Consider using: GuiContextMenu()
GuiDropFiles   \nUSE: Label that launches when files/folders are dragged and dropped onto the GUI.\nREMARK: Prefixing the GUI name to the label/function limits that code to that Gui.\nREPLACEMENT: Consider using: GuiDropFiles()
GuiControl   \nGuiControl, SubCommand, ControlID, [Value]\nGuiControl, SubCommand, ControlID, [Value]\nUSE: Makes a variety of changes to a control in a GUI window.\nSUBCOMMANDS:\n    Move = Move|resize control      Disable = Disable control use\n    Show = make control visible     Hide = Make control invisible\n    Enable = Enable control use     (Blank) = Put new content into control\n    Focus = Set focus to control    Text = Change text|caption of control\n    Delete = Not implemented yet    MoveDraw = Same as move. Forces repaint\n    Choose = Sets the selection in a ListBox|DropDownList|ComboBox|Tab control\n    ChooseString = Same as choose but selection to the defined string\n    Font = Change control font, size, color, or style\n    Options = Add|remove options from a control\nREMARK: To operate on a specific GUI, prefix SubCommand with GUI's name.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
GuiControl, , ControlID, [Value]   \nUSE: Puts new contents into the control.\nVALUE: Depends on control type\n    Text|Button|GroupBox|StatusBar|Link|Edit = New text\n    Picture = Image path|handle to new picture\n    Hotkey = BLANK removes current hotkey\n    Checkbox|Radio = 0|1|-1 then uncheck|check|graycheck. Otherwise, new text.\n    DateTime|MonthCal = Set date. Use YYYYMMDDHH24MISS format.\n    UpDown|Slider|Progress = Set position\n    Tab|DropDownList|ComboList|ListBox = New delimited list\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
GuiControl,Text, ControlID, [Value]   \nUSE: Changes the text|caption of a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Text, guiBtn1, Close Button
GuiControl,Move, ControlID, Options   \nUSE: Move|resize a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Move, guiBtn1, x50 y10
GuiControl,MoveDraw, ControlID, [Options]   \nUSE: Move|resize a control and repaint control area.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:MoveDraw, guiBtn1, x50 y10
GuiControl,Focus, ControlID   \nUSE: Sets keyboard focus to the control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Focus, guiBtn1
GuiControl,Disable, ControlID   \nUSE: Disable|gray out a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Disable, guiLoadBtn
GuiControl,Enable, ControlID   \nUSE: Enable a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Enable, guiLoadBtn
GuiControl,Hide, ControlID   \nUSE: Hides a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Hide, guiBtn1
GuiControl,Show, ControlID   \nUSE: Shows a control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Show, guiBtn1
GuiControl,Choose, ControlID, N   \nUSE: Set a ListBox|DropDownList|ComboBox|Tab control selection to Nth item.\nN: Number = select item. All = Select all items. 0 = Deselect current item\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Choose, guiLB, All
GuiControl,ChooseString, ControlID, String   \nUSE: Set a ListBox|DropDownList|ComboBox|Tab control selection to matching String.\nSTRING: Selection string to search for.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:ChooseString, guiTabs, Tab2
GuiControl,Font, ControlID   \nUSE: Updates control the current Font setting.\nREMARK: Set the desired font with 'Gui, Font' first.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: Gui, MyGUI:Font, s20 Bold, Consolas\n    GuiControl, MyGUI:Font, gText
GuiControl,Options, ControlID, Value   \nUSE: Add|remove various options and styles to a control.\nOPTIONS: +|- an option to add|remove it.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGUI:+gFire +Center +c00FF00
GuiControlGet   \nGuiControlGet, OutputVar, [SubCommand, ControlID, Value]\nGuiControlGet, OutputVar, [SubCommand, ControlID, Value]\nUSE: Get various information about a GUI control.\nSUBCOMMAND:\n    BLANK = Get control contents. dependent on control type.\n    Pos = Get control size|position.\n    Focus = Get control identifier (ClassNN) for focused control.\n    FocusV = Get variable name of focused control.\n    Enabled = Get control enable state.\n    Visible = Get control visibility state.\n    HWND = Get handle of control.\n    Name = Get variable name of control.
GuiControlGet, OutputVar, , [ControlID, Text]   \nUSE: Get the contents of the control. Usually text but dependent on type.\nTYPE: Depends on control\n    Picture = Get file name used at creation.\n    Edit = Get contents of edit box.\n    Hotkey = Get hotkey. BLANK if none.\n    Checkbox|Radio = Get check status. 1=Checked. 0=Unchecked. -1=Gray.\n    UpDown|Slider|Progress = Get current position.\n    Tab|DropDownList|ComboBox|ListBox = Get text of selected item.\n    StatusBar = Get text of first part.\n    ActiveX = Get new wrapper.\nTEXT: If this param is Text, it will always get the text/caption of a control.\nEX: GuiControlGet, guiCheckState, , guiCB2
GuiControlGet, OutputWHXY, Pos, [ControlID]   \nUSE: Get the position|size of the control relative to client area.\nOUTPUT: Creates 4 variables for Width|Height|XCoord|YCoord\n    Output name is affixed with W|H|X|Y respectively.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, gEdit, Pos, guiEdit2\n    MsgBox, W=%gEditW% `nH=%gEditH% `nX=%gEdit% `nY=%gEditY%
GuiControlGet, OutputVar, Focus   \nUSE: Get control identifier (ClassNN) for currently focused control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, focusCI, Focus
GuiControlGet, OutputVar, FocusV   \nUSE: Get variable name for currently focused control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, focusVar, FocusV
GuiControlGet, OutputVar, Enabled, [ControlID]   \nUSE: Get enabled state of control.\nOUTPUTVAR: 0 = Disabled. 1 = Enabled.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conEn, Enabled, submitBtn
GuiControlGet, OutputVar, Visible, [ControlID]   \nUSE: Get visibility state of control.\nOUTPUTVAR: 0 = Hidden. 1 = Visible.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conVis, Visible, submitBtn
GuiControlGet, OutputVar, HWND, [ControlID]   \nUSE: Get handle of control.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conHWND, HWND, submitBtn
GuiControlGet, OutputVar, Name, [ControlID]   \nUSE: Get name of control variable.\nOUTPUTVAR: BLANK if no name.\nErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conVarName, Name, submitBtn
Hotkey   \nHotkey, [Modifier]KeyName, [Label, Options]\nHotkey, [Modifier]KeyName, [Label, Options]\nUSE: Create, modify, enable, or disable a hotkey.\nMODIFIER: Hotkey modifiers and modifier symbols.\n    # = Win key     & = Combo keys      * = Fire\n    ! = Alt         < = Left mod key    ~ = Always send hotkey\n    ^ = Control     > = Right mod key   $ = Hook prevents key loops\n    + = Shift       <^>! = AltGr        UP = Key release\nKEYNAME: The key that will fire the hotkey.\nLABEL: A Label or FuncObject. It can alternately be one of these:\n    On = Enable hotkey      Toggle = Set hotkey to opposite of current\n    Off = Disable hotkey    AltTab = Allows for AltTab hotkeys. See docs.\nOPTIONS:\n    On = Enable hotkey              Off = Disable hotkey\n    iN = N level for input          tN = N number of threads\n    pN = Priority. N = 1...5        B|B0 = Buffer|Buffer disable\n    UseErrorLevel = Skip warning dialogs and set ErrorLevel. See docs.\nErrorLevel+EXO: Set if UseErrorLevel is used.\nEX: Hotkey, $+Backspace::Delete, On
Hotkey, If, % [FunctionObject|(Expression)]   \nHotkey, IfWin[Not]Active|Exist, [WinTitle, WinText]\nHotkey, IfWin[Not]Active|Exist, [WinTitle, WinText]\nUSE: Makes subsequent hotkeys context sensitive.\nREMARK: Leave optional areas blank to turn context sensitivity off.\nEX: Hotkey, IfWinNotExist, ahk_exe winamp.exe ; Applies IfWin check to next hotkey\n    Hotkey, *#x, LaunchWinamp, On ; Win+X launches winamp if it does not exist
ImageSearch, OutputX, OutputY, X1, Y1, X2, Y2, [Options]ImgFile   \nUSE: Searches an area of screen for an image.\nX1|Y1: Coordinates of upper left search area.\nX2|Y2: Coordinates of lower right search area.\nIMGFILE: Path to image file.\nOPTIONS:\n    *IconN = Nth image file icon number\n    *N = Allowed color variation. 0 .. 255\n    *TransN = Transparent color. N = Hex|ColorName\n    *wn = Width in N pixels\n    *hn = Height in N pixels\nErrorLevel+EXO: 0 = Image found. 1 = Not found. 2 = Error.\nEX: ImageSearch, findX, findY, 0, 0, 300, 200, *32 C:\\Icon.ico
IniDelete, Filename, Section, [Key]   \nUSE: Delete a value from a standard format .ini file.\nKEY: Key name to delete. If omitted, entire section is deleted.\nErrorLevel+EXO: 0 = Image found. 1 = Not found. 2 = Error.\nEX: IniDelete, C:\\ahksettings.ini, SaveData, LastGuiPos
IniRead, OutputVar, Filename, [Section, Key, Default]   \nUSE: Get a key value, a section, or a list of sections from a .ini file.\nOUTPUTVAR: Depends on supplied params\n    List of sections = Only Filename\n    List of keys     = Filename and Section\n    Key's value      = Filename, Section, and Key\nDEFAULT: Value to use if a key can't be found.\nEX: IniRead, keyVal, C:\\test.ini, sec1, testKey1, Error. Not found.
IniWrite, Value|Pairs, Filename, Section, [KeyName]   \nUSE: Write a value or an entire section to a .ini file.\nVALUE: The Value to set if KeyName is present\nPAIRS: Any number of Key:Value Pairs if KeyName is omitted.\n    Pairs must not contain any blank lines.\nREMARK: Longer text can be broken up using Continuation Sections.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: IniWrite, % "key1=val1`nkey2=val2`nkey3=val3", C:\\Test.ini, CustomSection
Input, [OutputVar, Options, EndKeys, MatchList]   \nUSE: Waits for the user to type something.\nOUTPUTVAR: Stores visible keys. Non-visible keys can be detected with EndKeys.\nOPTIONS: Optional space separation is allowed.\n    V = Visible input text      * = Entire input is checked for match\n    C = Case sensitive          Ln = Limit input to n chars\n    B = Ignore backspace        I = Ignore AHK generated input\n    tN = Time in N seconds      M = Capture modified keystrokes\n    e = Use char code instead of key code for singular end characters\nENDKEYS: List of keys that will end this input. Use Send key format. {Enter}\nMATCHLIST: Comma separated list of words. Input ends if a word is matched.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\n    0 = If no params, prior input successfully terminated\n    1 = If no params, no input in progress\n    Timeout = Input timed out            EndKey:Name = Name of end key pressed\n    Match = Matched item in MatchList    Max = Max length reached and no matches\n    NewInput = Input interrupted by another Input\nEX: Input, SingleKey, I * V, {Enter}{Space}{Tab}, ball,dog,cat
InputBox, OutputVar, [Title, Prompt, HIDE, W, H, X, Y, Font, Timeout, Default]   \nUSE: Display an input box to get user input.\nTITLE: Window title                  PROMPT: Notify user of expected input\nHIDE: Use HIDE to mask user input    FONT: Not implemented yet\nDEFAULT: Default input field text    TIMEOUT: Time in seconds before closing\nW|H|X|Y: Width, height, x|y coords of input box\nErrorLevel+EXO: 0 = OK pressed. 1 = Cancel pressed. 2 = Timeout.\nREMARK: OutputVar is always set to the edit field, even if canceled.\nEX: InputBox, userName, Name, Enter your name:,, 300, 150,,,,, Name here
KeyHistory   \nUSE: Opens a window that shows info, recent keystrokes, mouse clicks, etc.
KeyWait, KeyName, [Options]   \nUSE: Wait for a key|mouse|joy button to be pressed|released.\nKEYNAME: Any key from the key list.\nOPTIONS: List of options. Space separation allowed.\n     D = Wait for key to be pressed down\n     L = Check logical state instead of physical\n    tN = Timeout in N seconds.\nErrorLevel+EXO: 0 = Success. 1 = Timeout.\nEX: KeyWait, LButton, D T1
ListHotkeys   \nUSE: Displays information about script hotkeys.
ListLines   \nUSE: Displays the script lines most recently executed.
ListVars   \nUSE: Displays information about script variables. Names, contents, etc.
Menu   \nMenu, MenuName, SubCommand, [Value1, Value2, Value3, Value4]\nMenu, MenuName, SubCommand, [Value1, Value2, Value3, Value4]\nUSE: Create, delete, modify and show menus and tray icons.\nSUBCOMMANDS:\n    Show = Show menu                    Check = Add check left of item\n    Color = Set menu color              Uncheck = Remove check from item\n    Add = Add a menu|submenu            ToggleCheck = Check|Uncheck an item\n    Rename = Rename an item             Enable = Enable a disabled item\n    Icon = Set tray|menu icon           Disable = Disable an enabled item\n    Insert = Insert menu item           ToggleEnable = Disable|Enable item\n    NoIcon = Remove tray|menu icon      Default = Set default menu item\n    Tip = Set tray icon tooltip         NoDefault = Unset custom default\n    Delete = Delete menu item           DeleteAll = Delete all custom items\n    Standard = Insert standard menu items\n    NoStandard = Remove standard menu items\n    UseErrorLevel = Skip warning/error dialogs\n    Click = Set tray icon clicks to activate default menu\n    MainWindow = Enable main window access for compiled scripts\n    NoMainWindow = Prevent main window access for compiled scripts
Menu,MenuName,Add, [MenuItem, LabelSubmenu, Options]   \nUSE: Add|update|convert a menu or submenu item.\nMENUITEM: The name or position of a menu item\nLABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.\nOPTIONS: Space or tab separated\n    +Right = Right align text       +Break = Item starts new column\n    pN = Set priority to N level    +BarBreak = +Break with a dividing line\n    +Radio = Use bullet instead of a check mark\nREMARK: To add a separator, omit all 3 parameters.
Menu,MenuName,Insert, [MenuItem, InsertItem, LabelSubmenu, Options]   \nUSE: Insert a new item before the specified menu item.\nLABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.\nOPTIONS: Space or tab separated\n    +Right = Right align text       +Break = Item starts new column\n    pN = Set priority to N level    +BarBreak = +Break with a dividing line\n    +Radio = Use bullet instead of a check mark
Menu,MenuName,Delete, [MenuItem]   \nUSE: Deletes the specified menu item from the menu.\nMENUITEM: Name or position of a menu item.\nMenuItemName is the name or position of a menu item (see MenuItemName for details).
Menu,MenuName,DeleteAll   \nUSE: Deletes all custom menu items from the menu.
Menu,MenuName,Rename, MenuItem, [NewName]   \nUSE: Rename specified menu item to NewName.\nMENUITEM: Name or position of a menu item.\nNEWNAME: If NewName is omitted, item becomes a line separator.
Menu,MenuName,Check, MenuItem   \nMENUITEM: Name or position of a menu item.\nUSE: Add a visible check mark next to the menu item.
Menu,MenuName,Uncheck, MenuItem   \nUSE: Remove check mark from specified menu item.\nMENUITEM: Name or position of a menu item.
Menu,MenuName,ToggleCheck, MenuItem   \nUSE: Toggle's the menu item's check mark on or off.\nMENUITEM: Name or position of a menu item.
Menu,MenuName,Enable, MenuItem   \nUSE: Enabled a previously disabled menu item.\nMENUITEM: Name or position of a menu item.
Menu,MenuName,Disable, MenuItem   \nUSE: Disable a previously enabled menu item.\nMENUITEM: Name or position of a menu item.
Menu,MenuName,ToggleEnable, MenuItem   \nUSE: Toggles the enabled|disabled state of the menu item.\nMENUITEM: Name or position of a menu item.
Menu,MenuName,Default, [MenuItem]   \nUSE: Changes the default menu item to MenuItem.\nMENUITEM: Name or position of a menu item.
Menu,MenuName, Color, ColorValue, [Single]   \nUSE: Changes the background color of the menu to Hex|ColorName.\nSINGLE: If this parameter isn't single, submenus will not be changed.
Menu,MenuName, Icon, MenuItem, FileName, [IconNum, IconWidth]   \nUSE: Sets a icon for the specified menu item.\nMENUITEM: Name or position of a menu item.\nICONNUM: Icon number if FileName has multiple icons.
Menu,MenuName, NoIcon, MenuItem   \nUSE: Removes the icon from the specified menu item, if any.\nMENUITEM: Name or position of a menu item.
Menu,MenuName, Show, [X, Y]   \nUSE: Displays MenuName.\nX|Y: If X and Y are omitted, display at mouse location.
Menu,MenuName, UseErrorLevel, [Off]   \nUSE: Skips warning dialogs and thread terminations on Menu error.\nErrorLevel: 1 = Problem. 0 = Success.
Menu,MenuName,NoDefault   \nUSE: Change menu default back to original default.
Menu,MenuName,NoStandard   \nUSE: Remove all standard menu items if present.
Menu,MenuName,Standard   \nUSE: If not present, insert standard menu items.
Menu,Tray,Click, ClickCount   \nUSE: Set number of clicks to activate the default item of the tray menu.\nCLICKCOUNT: 1 = Single click    2 = Double click
Menu,Tray,Icon, [FileName, IconNum, Freeze]   \nUSE: Change script tray icon to one from FileName.\nICONNUM: Icon number if FileName has multiple icons.\nFREEZE: 1 = Freeze icon    0 = Unfreeze icon\nEX: Menu, Tray, Icon, C:\\TestIcon.ico,, 0
Menu,Tray,MainWindow   \nUSE: Allow a compiled script's main window to be shown via tray icon.
Menu,Tray,NoIcon   \nUSE: Removes the tray icon if it exists.
Menu,Tray,NoMainWindow   \nUSE: Prevent a compiled script's main window from being shown via tray icon.
Menu,Tray,Tip, [Text]   \nUSE: Changes the tray icon's tooltip.\nTEXT: Text to display. If omitted, uses default text.
MouseClick, [Button, X, Y, Count, Speed, State, Relative]   \nUSE: Clicks or holds down a mouse button\nBUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL\nCOUNT: Number of clicks to send.\nSPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).\nSTATE: D = Down    U = Up    BLANK = Full click\nRELATIVE: If R is present, click is relative to mouse position.\nREMARK: Click is generally more flexible and easier to use.\nEX: MouseClick, Left, 200, 100, 2, 3
MouseClickDrag, Button, X1, Y1, X2, Y2, [Speed, Relative]   \nUSE: Click, drag, or release a mouse button.\nBUTTON: Left|Right|Middle|X1|X2\nSPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).\nRELATIVE: If R is present, click is relative to mouse position.\nEX: MouseClickDrag, Left, 0, 0, 100, 100, 3
MouseGetPos, [OutputX, OutputY, OutputWin, OutputControl, Flag:=0]   \nUSE: Get current position, window name, and control name under mouse.\nFLAG:\n    0 = Default method\n    1 = Simple method\n    2 = Store HWND in OutputControl rather than ClassNN.\n    3 = Simple method with HWND to OutputControl\nEX: MouseGetPos, mouseX, mouseY, mouseWin
MouseMove, X, Y, [Speed, Relative]   \nUSE: Moves the mouse cursor to XY coordinate\nSPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).\nRELATIVE: If R is present, click relative to current mouse position.\nEX: MouseMove, 100, 50, 1
MsgBox, [Options, Title, Text, Timeout]   \nMsgBox, Text\nMsgBox, Text\nUSE: Premade popup GUI for displaying text and getting user responses.\nOPTIONS: A hex or dec number that sets various options of the message box.\nCHEAT: See Cheat_MsgBox for options or use MagicBox.\nREMARK: MsgBox can use just the text field.\nEX: MsgBox, 0x14, Error, Click yes to retry and no to close.
OutputDebug, Text   \nUSE: Sends a string to the debugger for display.\nREMARK: If script lacks a debugger, system debugger displays the string.\n    If system debugger inactive, command has no effect.\nEX: OutputDebug, %A_Now%: Error: File:%A_LineFile% Line:%A_LineNumber%
Pause, [State:="", Thread:=0]   \nUSE: Pauses the script's current thread.\nSTATE: On = Turn pause on\n    Off = Disable pause\n    Toggle = Toggles On|Off state\nTHREAD: 0 = The command pauses the current thread\n        1 = Pause the previous thread\nEX: Pause, On
PixelGetColor, OutputVar, X, Y, [Mode]   \nUSE: Gets the BGR color of pixel at X|Y coordinate.\nMODE: Space separated\n    RGB = Get color in RGB format\n    Alt = Alternate, slower method to get color\n    Slow = Slower method that may work in some full-screen apps\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: PixelGetColor, col, 100, 200, RGB Alt
PixelSearch, OutputX, OutputY, X1, Y1, X2, Y2, Color, [Variation, Mode]   \nUSE: Searches a region of the screen for a pixel of the specified color.\nX1|Y1: Start coords      X2|Y2: End coords      COLOR: BGR color ID\nVARIATION: 0 .. 255. The +|- amount each color can be off by.\nMODE: Space separated options\n    FAST = Faster searching method. Searches by row instead of by column.\n    RGB = Use RGB instead of BGR for Color.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: PixelSearch, foundX, foundY, 0, 0, 90, 90, 0xccff00, 16, Fast RGB
PostMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText]   \nUSE: Sends a message to a window or control.\nMSG: Message number to send. See: Cheat_Window_Messages\nWPARAM|LPARAM: Used to send message parameters.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: PostMessage, 0x50, 0, 0x4090409,, A
Process   \nProcess, SubCommand, [ID, Value]\nProcess, SubCommand, [ID, Value]\nUSE: Get information about a process or take action based on a process.\nID: A program's PID or EXE name.\n    Exist = Check if process is running\n    Close = Force close first matching process\n    Priority = Set priority level of first matching process\n    Wait = Wait for process to exist\n    WaitClose = Wait for all matching processes to close\n    List = Not yet implemented\nErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.
Process,Exist, [ID]   \nUSE: Check whether the specified process is running.\nID: A program's PID or EXE name.\nErrorLevel: 0 = No matching process. Otherwise, set to matching process PID.\nEX: Process, Exist, AutoHotkey.exe ;R=> 532e3a
Process,Close, [ID]   \nUSE: Force close the first matching process.\nID: A program's PID or EXE name.\nErrorLevel: 0 = No matching process or error. Otherwise, set to closed PID\nEX: Process, Close, AutoHotkey.exe
Process,Priority, [ID], Level   \nUSE: Set priority level of the first matching process.\nID: A program's PID or EXE name. BLANK = Sets script priority.\nLEVEL: Use whole word or first letter:\n    Low    BelowNormal    Normal    AboveNormal    High    RealTime\nErrorLevel: 0 = No matching process or error. Otherwise, set to PID.\nEX: Process, Priority, , A
Process,Wait, ID, [Seconds]   \nUSE: Wait until the specified process is running.\nID: A program's PID or EXE name.\nSECONDS: Seconds to wait before timing out. BLANK = Indefinitely.\nErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.\nEX: Process, Wait, notepad.exe, 5
Process,WaitClose, ID, [Seconds]   \nUSE: Wait for all matching processes to close.\nSECONDS: Seconds to wait before timing out. BLANK = Indefinitely.\nErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.\nEX: Process, WaitClose, chrome.exe, 5
Progress, Param1, [SubText, MainText, WinTitle, FontName]   \nUSE: Create or update a progress bar window.\nPARAM1: Options = Create new bar\n    Show = Show if hidden       Off = Destroy window\n    BLANK = Update text         Number Only = Update progress bar\nOPTIONS:\n    xN = X coord        zhN = Bar height    fmN = Font size MainText\n    yN = Y coord        zwN = Bar width     fsN = Font size SubText\n    zxN = Bar X coord   hN = N height       wmN = Font weight MainText\n    zyN = Bar Y coord   Wn = N width        wsN = Font weight SubText\n    cbN = Bar color     ctN = Text color    cwN = Window color\n    B = Borderless      B1 = Thin border    B2 = Dialog-style border\n    M = Moveable        M1 = +Resizeable    M2 = +MenuBtns\n    T = Task Button     pN = starting pos   A = Disable always-on-top\n    rN1-N2 = Range N1 to N2                 Hide = Hide initially\n    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.\nEX: Progress, p50 r1-100 c10 cwBlack ctFF8800 M T, SubText, MainText
Random, OutputVar, [Min:=0, Max:=2147483647 ]   \nRandom, , Seed\nRandom, , Seed\nUSE: Generates a pseudo-random number between Min and Max (inclusive).\nMIN: Minimum number                     MAX: Maximum number\nSEED: Reseeds generator. 0 .. 4294967295. Must omit max field.\nEX: Random, rand, 1, 50
RegDelete, KeyName, [Value]   \nUSE: Delete a subkey or value from the registry.\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG\nVALUE: Value name. Use ahk_default to delete key (default).\n    Omitting value will delete everything in KeyName.\nREMARK: Remote registry format: \\\\workstation01:HKLM\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: RegDelete, HKLM\\Software\\SomeApplication, TestValue
RegRead, OutputVar, KeyName, [ValueName]   \nUSE: Reads a value from the registry.\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG\nREMARK: Remote registry format: \\\\workstation01:HKLM\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: RegRead, defKey, HKLM\\SomeSoftware\\Key, ahk_default
RegWrite, DataType, KeyName, [ValueName, Value]   \nUSE: Writes a Value to the entry ValueName in the registry.\nDATATYPE:\n    REG_SZ = String    REG_MULTI_SZ = Array of strings    REG_BINARY = Binary\n    REG_DWORD = 32-bit num    REG_EXPAND_SZ = String using environment variables\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG\nVALUENAME: Name of entry. If omitted, the (Default) key is used.\nREMARK: Remote registry format: \\\\workstation01:HKLM\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: RegWrite, REG_SZ, HKLM\\SOFTWARE\\Test, Name, Test Name
Reload   \nUSE: Exit current script and start a new instance.
Run, Target, [WorkingDir, Options, PID]   \nUSE: Run an external program.\nTARGET: Name and path of file to run.\nOPTIONS: Max|Min|Hide = Start window Maximized|Minimized|Hidden\n    UseErrorLevel = Skip warning dialog on error & ErrorLevel = ERROR\nPID: The PID of the running program. BLANK = Indeterminable.\nErrorLevel+EXO: UseErrorLevel option. 0 = Success. ERROR = Failure.\nEX: Run, C:\\Windows\notepad.exe, UseErrorLevel
RunAs, [UserName, Password, Domain]   \nUSE: Specify user credentials for all subsequent Run and RunWait commands.\nREMARK: If all parameters are omitted, RunAs is turned off.\nEX: RunAs, Guest, Password123
RunWait, Target, [WorkingDir, Options, PID]   \nUSE: Run a program and wait until it finishes.\nTARGET: Name and path of file to run.\nOPTIONS: Max|Min|Hide = Start window Maximized|Minimized|Hidden\n    UseErrorLevel = Skip warning dialog on error & ErrorLevel = ERROR\nErrorLevel+EXO: ERROR = Failure. Number = Exit code of finished program.\nEX: RunWait, C:\\Startup.bat,, Hide
Send, [Options]Keys   \nUSE: Sends simulated keystrokes and mouse clicks to the active window.\nMODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey\nKEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.\n    Braces are optional for single keys with no up|down state.\nOPTIONS: {Raw} = Sends all text after this as literal text\n    {Text} = Send characters instead of keystrokes\n    {Blind} = Keys are sent along with any held modifiers\nREMARK: Send acts like an alias for SendInput|SendEvent|SendPlay.\n    Send's type is determined by SendMode. Default is SendEvent.\nEX: Send, {Text}Normally, {Enter} will make a new line.
SendInput, [Options]Keys   \nUSE: The faster, more reliable method of sending simulated keystrokes.\nMODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey\nKEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.\n    Braces are optional for single keys with no up|down state.\nOPTIONS: {Raw} = Sends all text after this as literal text\n    {Text} = Send characters instead of keystrokes\n    {Blind} = Keys are sent along with any held modifiers\nEX: SendInput, {Text}Normally, {Enter} will make a new line.
SendEvent, [Options]Keys   \nUSE: Slower method of sending simulated keystrokes. Adjustable key delays.\nMODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey\nKEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.\n    Braces are optional for single keys with no up|down state.\nOPTIONS: {Raw} = Sends all text after this as literal text\n    {Text} = Send characters instead of keystrokes\n    {Blind} = Keys are sent along with any held modifiers\nEX: SendEvent, {Text}Normally, {Enter} will make a new line.
SendPlay, [Options]Keys   \nUSE: Method of sending simulated keystrokes that works in more programs.\nMODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey\nKEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.\n    Braces are optional for single keys with no up|down state.\nOPTIONS: {Raw} = Sends all text after this as literal text\n    {Text} = Send characters instead of keystrokes\n    {Blind} = Keys are sent along with any held modifiers\nEX: SendPlay, {Text}Normally, {Enter} will make a new line.
SendLevel, Num   \nUSE: Set interruption level of hotkeys and hotstrings.\nNUM: 0 .. 100
SendMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText, Timeout]   \nUSE: Sends a message to a window or control and waits for acknowledgment.\nMSG: Message number to send. See: Cheat_Window_Messages\nWPARAM|LPARAM: Parameters to send.\nTIMEOUT: Time to wait for message to be processed. In ms.\nErrorLevel+EXO: Fail = Problem or command timed out. Otherwise set to numeric message.\nEX: SendMessage, 0x50, 0, 0x4090409,, A
SendMode, Mode   \nUSE: Sets the Send command to a different send method.\nREMARK: Initially set to SendEvent.\nMODE: Event = Uses SendEvent\n      Input = Uses SendInput. Falls back on SendEvent.\n      Play  = Uses SendPlay\n      InputThenPlay = Uses SendInput. Falls back on SendPlay.
SetBatchLines, Setting   \nUSE: Determines how often a script initiates a 10ms sleep.\nSETTING: -1 = Never sleep\n          N = Sleeps after N lines execute\n        Nms = Sleep after N milliseconds have passed
SetCapsLockState, [State]   \nUSE: Turn CapsLock On|Off or Enable|Disable it.\nSTATE: On = Set CapsLock to on         AlwaysOn = Force CapsLock to stay on\n      Off = Set CapsLock to off       AlwaysOff = Force CapsLock to stay off
SetControlDelay, Delay   \nUSE: Set delay after each control-modifying command.\nDELAY: -1 .. N. In ms. Default is 20.\n    -1 = No delay    0  = Shortest delay    N = Delay in ms
SetDefaultMouseSpeed, Speed   \nUSE: Sets the mouse speed for commands that move the mouse.\nSPEED: 0 (Fast) .. 100 (Slow)
SetKeyDelay, [Delay, Duration, Play]   \nUSE: Set the delay, in milliseconds, after each Send|ControlSend keystroke.\nDELAY: Time between each keystroke. -1 .. N. In ms.\n    -1 = No delay    0  = Shortest delay    N = Delay in ms\nDURATION: Time key is held down. -1 .. N. In ms.\n    -1 = No delay    0  = Shortest delay    N = Delay in ms\nPLAY: Use PLAY to apply these settings to SendPlay mode.
SetMouseDelay, Delay, [Play]   \nUSE: Set the delay after each mouse movement or click.\nDELAY: -1 = No delay    0  = Shortest delay    N = Delay in ms\nPLAY: Use PLAY to apply these settings to SendPlay mode.
SetNumLockState, [State]   \nUSE: Turn NumLock On|Off or Enable|Disable it.\nSTATE:\n    On = Set NumLock to on          AlwaysOn = Force NumLock to stay on\n    Off = Set NumLock to off        AlwaysOff = Force NumLock to stay off
SetRegView, RegView   \nUSE: Set registry view to 32-bit or 64-bit.\nREGVIEW: 32 = 32-bit    64 = 64-bit     Default = Restore to original
SetScrollLockState, [State]   \nUSE: Turn ScrollLock on or off. Can also set to always on|always off.\nSTATE:\n    On = Set ScrollLock to on       AlwaysOn = Force ScrollLock to stay on\n    Off = Set ScrollLock to off     AlwaysOff = Force ScrollLock to stay off
SetStoreCapsLockMode, State   \nUSE: Sets the default behavior for how Send controls CapsLock.\nSTATE: On = CapsLock is restored to former value if Send altered it.\n      Off = CapsLock is never changed.
SetTimer, [Label, State, Priority]   \nUSE: Set a timer to run a subroutine|function once or repeatedly.\nLABEL: Label, function, or FuncObj.\nSTATE: Off = Disables a running timer\n       On = Re-enables a disabled timer or start a new timer at 250 ms\n       Delete = Disables and deletes existing timer\n       N = Set timer to repeat every N ms\n       -N = Set timer to run once in N ms\nEX: SetTimer, UpdateCheck, % 5 * 60 * 1000 ;Run function every 5 minutes
SetTitleMatchMode, Mode|Speed   \nUSE: Set the text matching behavior for titles in WinTitle.\nMODE:\n    1 = Title must start with.\n    2 = Title must contain.\n    3 = Title must exactly match.\n    RegEx = Title must match a RegEx pattern.\nSPEED:\n    Fast = Fast but certain controls might not be detected.\n    Slow = Much slower but more thorough.\nREMARK: Mode and speed must be set separately.\nEX: SetTitleMatchMode,
SetWinDelay, Delay   \nUSE: Set the delay that occurs after commands that operate on windows.\nDELAY: Number. In ms. Default is 100.\n    -1 = No delay    0  = Shortest delay    N = Delay in ms
SetWorkingDir, Dir   \nUSE: Changes the script's current working directory to Dir.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: SetWorkingDir, D:\\Scripts
Shutdown   \nUSE: Shut down, restart, or logoff system.\nCODE: The sum of any of the following:\n    0 = Logoff    1 = Shutdown      2 = Reboot\n    4 = Force     8 = Power down\nEX: Shutdown, 5 ; Forces a shutdown
Sleep, Delay   \nUSE: Wait a specified amount of time before continuing.\nDELAY: Time in milliseconds\n    Min = 0\n    Max = 2147483647\n    -1  = No sleep but message queue is checked\nEX: Sleep, % (1000 * 60 * 5) ; Sleeping for 5 minutes using an expression
Sort, Var, [Options]   \nUSE: Arranges the content of Var in Alphabetical, numerical, or random order.\nOPTIONS:\n    N  = Numeric sort           CL = Case insensitive locale\n    R  = Reverse order          dX = Set delimiter to X value\n    C  = Case sensitive          F = Custom Function. See docs\n    U  = Remove duplicates      pN = Sort by N character position\n    Random = Randomizes list     \\ = Sort after last backslash in Var\n    Z  = Delimiters at end of var infer a blank final entry\nEX: Sort, myList, d| U ; Sort through a pipe delimited list. Remove duplicates.
SoundBeep, [Frequency, Duration]   \nUSE: Emits a tone from the PC speaker.\nFREQUENCY: Number. 37 .. 32767. Default = 523\nDURATION: Time in milliseconds. Default = 150\nEX: SoundBeep, 750, 500
SoundGet, OutputVar, [Component, Control, Device]   \nUSE: Get various settings from a sound device.\nCOMPONENT: Default = MASTER\n    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS\n    N/A    LINE     DIGITAL      HEADPHONES\n    AUX    SYNTH    PCSPEAKER    MICROPHONE\nCONTROL: Default = VOLUME\n    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST\n    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN\nDEVICE: Device number. Default = 1\nErrorLevel+EXO: 0 = Success. Failure will result in a string.\nEX: SoundGet, sysVol, MASTER, VOLUME, 2
SoundGetWaveVolume, OutputVar, [Device]   \nUSE: Get the wave output volume percentage for a sound device.\nDEVICE: Device number. Defaults to 1.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: SoundGetWaveVolume, vol, 2
SoundPlay, Filename, [Wait]   \nUSE: Plays a sound, video, or other supported file type.\nFILENAME: Name of file to be played. For a standard system sound, use:\n    *-1 = Simple beep    *16 = Hand/stop/error    *32 = Question\n    *48 = Exclamation    *64 = Asterisk/info\nWAIT: Omit = Immediately go to next line\n    1|WAIT = Wait for file to finish before going to next line\nErrorLevel: 0 = Success. 1 = Failure.\nEX: SoundPlay, C:\\SoundFile.mp3, 1
SoundSet, Value, [Component, Control, Device]   \nUSE: Changes various settings of a sound device.\nVALUE: N = Set to N percent\n      +N = Increase by N percent\n      -N = Decrease by N percent\nCOMPONENT: Default = MASTER\n    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS\n    N/A    LINE     DIGITAL      HEADPHONES\n    AUX    SYNTH    PCSPEAKER    MICROPHONE\nCONTROL: Default = VOLUME\n    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST\n    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN\nDEVICE: Device number. Default = 1\nErrorLevel+EXO: 0 = Success. Failure will result in a string.\nEX: SoundSet, +50, HEADPHONES, VOLUME, 1
SoundSetWaveVolume, Value, [Device]   \nUSE: Change the wave output volume for a sound device.\nVALUE: N = Set to N percent\n      +N = Increase by N percent\n      -N = Decrease by N percent\nDEVICE: Device number. Default = 1\nErrorLevel: 0 = success. 1 = failure.\nEX: SoundSetWaveVolume, 100, 2
SplashImage, [Param1, Options, SubText, MainText, WinTitle, FontName]   \nUSE: Create, destroy, or update a splash image window.\nPARAM1: File and path = Create new image\n    Show = Show if hidden       Off = Destroy window\nOPTIONS:\n    xN = X coord           hN = N height         fmN = Font size MainText\n    yN = Y coord           Wn = N width          fsN = Font size SubText\n    zxN = Image X coord    zhN = Image height    wmN = Font weight MainText\n    zyN = Image Y coord    zwN = Image width     wsN = Font weight SubText\n    cbN = Image color      ctN = Text color      cwN = Window color\n    B = Borderless         B1 = Thin border      B2 = Dialog-style border\n    M = Moveable           M1 = +Resizeable      M2 = +MenuBtns\n    T = Task Button        pN = starting pos     A = Disable always-on-top\n    rN1-N2 = Range N1 to N2                      Hide = Hide initially\n    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.\nEX: SplashImage, C:\\Test.jpg, zh60 zw70 h120 w90, Sub, Main, Title
SplashTextOff   \nUSE: Destroy an existing splash window.
SplashTextOn, [Width, Height, Title, Text]   \nUSE: Creates a customizable Text popup window.\nEX: SplashTextOn, 100, 40, Splash Title, Splash Text
SplitPath, InputVar, [OutName, OutDir, OutExt, OutNameNoExt, OutDrive]   \nUSE: Splits a file path or URL into name, directory, extension, and drive.\nOUTNAME: File name with ext             EXT: File's extension type\nNAMENOEXT: File name without ext        OUTDIR: Full directory\nDRIVE: Drive file resides in\nREMARK: Unneeded parts can be left blank.\nEX: SplitPath, % A_ScriptFullPath, name, dir, ext, nameX, drive\n    MsgBox, % name "`n" dir "`n" ext "`n" nameX "`n" drive
StatusBarGetText, OutputVar, [Part, WinTitle, WinText, NotTitle, NotText]   \nUSE: Get text from a standard status bar control.\nPART: Status bar part to get text from.\nErrorLevel+EXO: 0 = Success. 1 = Failure + OutputVar = BLANK.\nEX: StatusBarGetText, var, 1, A
StatusBarWait, [Text, SEC, Part, WinTitle, WinText, Check, NotTitle, NotText]   \nUSE: Wait until a window's status bar contains the specified Text.\nBARTEXT: Text to look for. Blank by default.\nSEC: Number of seconds to wait before timing out.\nPART: Bar section number to monitor.\nCHECK: How often the bar should be checked. In milliseconds.\nErrorLevel+EXO: 0 = Match found    1 = Command timed out\n    2 = Status bar not accessible.\nEX: StatusBarWait, Line: 1,, 1, a,, 100\n    MsgBox, Found it!
StringCaseSense, State   \nUSE: Set string comparison case sensitivity. Default is off.\nSTATE: ON = String comparisons are case sensitive. A = a ; false\n      Off = Case sensitivity is irrelevant. A = a ; true\n   Locale = Case sensitivity is based on user locale.
StringLower, OutputVar, Input, [TitleCase]   \nUSE: Converts a string to lowercase.\nTITLECASE: If set to T, Title Case is used.\nEX: StringLower, varLower, var
StringUpper, OutputVar, Input, [TitleCase]   \nUSE: Converts a string to uppercase.\nTITLECASE: If set to T, Title Case is used.\nEX: StringUpper, varUpper, var
Suspend, Mode   \nUSE: Disables or enables all or selected hotkeys and hotstrings.\nMODE: On  = Suspends all non-exempt hotkeys and hotstrings\n      Off = Re-enable hotkeys and hotstrings\n      Toggle = Toggles suspends current state\n      Permit = Marks current subroutine exempt from suspend\nREMARK: Hotkeys|Hotstrings that start with Suspend are exempt.
SysGet, OutputVar, SubCommand, [Value]   \nUSE: Get various system metrics.\nSUBCOMMAND:\n    MonitorCount = Get total number of monitors.\n    MonitorPrimary = Get primary monitor number.\n    Monitor = Get coordinates of specified monitor.\n    MonitorWorkArea = Get non-registered coordinates of specified monitor.\n    MonitorName = Get the name of specified monitor.\n    Number = See docs for list of numbers and what they get.
SysGet, OutputVar, MonitorCount   \nUSE: Get total number of monitors.
SysGet, OutputVar, MonitorPrimary   \nUSE: Get primary monitor number.
SysGet, OutputVar, Monitor, [N]   \nUSE: Get coordinates of specified monitor.\nOUTPUTVAR: 4 variables are created ending in Left|Right|Top|Bottom\n    OutputVarLeft|OutputVarRight|OutputVarTop|OutputVarBottom\nN: Monitor number. Default = Primary monitor
SysGet, OutputVar, MonitorWorkArea, [N]   \nUSE: Get non-registered coordinates of specified monitor.\nN: Monitor number. Default = Primary monitor\nREMARK: The taskbar is a registered area.
SysGet, OutputVar, MonitorName, [N]   \nUSE: Get the name of specified monitor.\nN: Monitor number. Default = Primary monitor
SysGet, OutputVar, Number   \nUSE: Get information from one of the many numbers.\nREMARK: Far too many to list. See the docs.
Thread, SubCommand, [Value1, Value2]   \nUSE: Sets the priority or interruptibility of threads.\nSUBCOMMAND:\n    NoTimers  = Prevents timer interruptions.\n    Priority  = Change current thread's priority level.\n    Interrupt = Change newly launched thread's duration of interruptibility.
Thread, NoTimers, True|False   \nUSE: Prevents interruptions from any timers.
Thread, Priority, Level   \nUSE: Change the priority level of the current thread.\nLEVEL: -2147483648 .. 2147483647\nREMARK: Consider using the Critical command as it can buffer events.
Thread, Interrupt, [Duration, LineCount]   \nUSE: Change uninterpretable status for new threads.\nDURATION: Time in milliseconds before interruptible.\nLINECOUNT: Amount of lines to execute before interruptible.
ToolTip, [Text, X, Y, ID:=1]   \nUSE: Creates an always-on-top window anywhere on the screen.\nTEXT: Text to display    BLANK = Hide ToolTip\nX|Y: Coordinates to display ToolTip. If omitted, ToolTip stays near cursor.\nID: 1-20. Identifies which tooltip to operate on.\nEX: ToolTip, Hello World,,,2 ; Sets second tooltip to Hello World
TrayTip, [Title, Text, Seconds, Options]   \nUSE: Create a balloon message near the tray icon.\nSECONDS: Time before closing. No effect on Vista or later.\nOptions: Default = 0. Otherwise, sum of the following:\n    Function:               Dec:    Hex:\n    Info icon               1       0x1\n    Warning icon            2       0x2\n    Error icon              3       0x3\n    No sound notification   16      0x10\n    Large icon              32      0x20\nREMARK: Title must be included for Text to show up.\n    Windows 10 may show a toast notification instead.\nEX: TrayTip, Time:, %A_Hour%:%A_Min%,,0x1
UrlDownloadToFile, URL, Filename   \nUSE: Download a file from the Internet.\nURL: Address to download from.\nFILENAME: Path to save file to.\nErrorLevel+EXO: 0 = Success. 1 = Failure.\nEX: UrlDownloadToFile, www.reddit.com, c:\\reddit.html
WinActivate, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Activate a specified window.\nEX: WinActivate, ahk_exe explorer.exe
WinActivateBottom, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Activates the bottommost matching window.
WinClose, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Closes the specified window.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number in seconds\nEX: WinClose, ahk_exe notepad.exe
WinGet   \nWinGet, OutputVar, [SubCommand, WinTitle, WinText, NotTitle, NotText]\nWinGet, OutputVar, [SubCommand, WinTitle, WinText, NotTitle, NotText]\nUSE: Get information about specified window(s) and their controls.\nSUBCOMMAND:\n    ID = Unique ID               ExStyle = Hex extended style\n    PID = Process ID             Count = Total matching windows\n    Style = Hex style            TransColor = Transparency color\n    MinMax = Min/Max state       ProcessPath = Path and EXE name\n    ProcessName = EXE name       Transparent = Transparency level\n    IDLast = Bottom window ID    List = List of IDs for all matching windows\n    ControlList = List of window controls\n    ControlListHWND = List of window control handles
WinGet, OutputVar, ID, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the unique ID|HWND number of the first matching window.
WinGet, OutputVar, IDLast, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the unique ID|HWND number of the bottommost matching window.
WinGet, OutputVar, PID, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the process ID of the first matching window.
WinGet, OutputVar, ProcessName, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the name of the process|EXE that owns a window.
WinGet, OutputVar, ProcessPath, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the full path and name of the process|EXE that owns a window.
WinGet, OutputVar, Count, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the total number of existing windows that match.
WinGet, OutputVar, List, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the unique ID|HWND of all matching windows.\nREMARK: Omitting all 4 WinTitle parameters will get all windows.
WinGet, OutputVar, MinMax, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the min|max state of a window.\nOUTPUTVAR:\n    BLANK = No matching window exists      1 = Maximized\n        0 = Not minimized or maximized    -1 = Minimized
WinGet, OutputVar, ControlList, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the control name of all window controls.\nOUTPUTVAR: A linefeed delimited list of each control's ClassNN.\nREMARK: BLANK = No controls found
WinGet, OutputVar, ControlListHWND, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the unique ID|HWND for each control in a window.\nOUTPUTVAR: A linefeed delimited list of each unique ID|HWND.\nREMARK: BLANK = No controls found
WinGet, OutputVar, Transparent, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get a window's degree of transparency.\nOUTPUTVAR: Transparency level. 0 .. 255.    BLANK = Not found
WinGet, OutputVar, TransColor, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get a window's marked transparency color.\nOUTPUTVAR: 6 digit hex color    BLANK = Not found
WinGet, OutputVar, Style, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get window's 8 digit hexadecimal style number.\nOUTPUTVAR: BLANK = No matching windows
WinGet, OutputVar, ExStyle, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get window's 8 digit hexadecimal extended style number.\nOUTPUTVAR: BLANK = No matching windows
WinGetActiveStats, Title, Width, Height, X, Y   \nUSE: Get title, size, and coords of active window.
WinGetActiveTitle, OutputVar   \nUSE: Get title of active window.\nREMARK: Same as using WinGetTitle
WinGetClass, OutputVar, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the class name of the specified window.
WinGetPos, [X, Y, Width, Height, WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the position and size of a specified window.\nWINTITLE: To get desktop size, use: Program Manager
WinGetText, OutputVar, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get text from the specified window.\nErrorLevel+EXO: 0 = Success. 1 = Failure.
WinGetTitle, OutputVar, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Get the title of the specified window.
WinHide, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Hide the specified window.
WinKill, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Forces the specified window to close.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds
WinMaximize, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Resizes specified window to maximum size.
WinMenuSelectItem, WinTitle, WinText, Menu, [SubMenu1, ..., SubMenu6, NotTitle, NotText]   \nUSE: Select a menu item from the specified window's menu bar.\nMENU: Top-level menu item name. Ex: File\n    Or Top-level menu item position. Ex: 1&\nMENU: Item|submenu item name. Ex: Recent\n    Or item|submenu item position. Ex: 4&\nREMARK: Use 0& to access window's system menu.\nErrorLevel: 0 = Success. 1 = Failure.\nEX: WinMenuSelectItem, Untitled - Notepad, , File, Open
WinMinimize, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Collapses specified window to task bar|SysTray.
WinMinimizeAll   \nUSE: Collapse all windows to task bar|SysTray.
WinMinimizeAllUndo   \nUSE: Restores all previously minimized windows.
WinMove, WinTitle, [WinText], X, Y, [Width, Height, NotTitle, NotText]   \nWinMove, X, Y\nWinMove, X, Y\nUSE: Changes the position|size of the specified window.\nREMARK: If X and Y are the only params, LastFoundWindow is used.\nX|Y: Position window X|Y pixels from the screen's upper left corner.\nWIDTH|HEIGHT: Set Width|Height of window in pixels.\nEX: WinMove, A,, 0, 0, % A_ScreenWidth/2, % A_ScreenHeight/2
WinRestore, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Returns window to it's original position and size.\nREMARK: If WinTitle is omitted, LastFoundWindow is used.
WinSet, SubCommand, Value, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Makes a variety of changes to the specified window.\nSUBCOMMAND:\n    AlwaysOnTop = Window stays above all other windows.\n    Bottom|Top = Send window to bottom|top of stack. No activation.\n    Disable|Enable|Redraw = Disables|Enables|Redraws the window.\n    Style|ExStyle = Changes window's style|extended style.\n    Region = Change the shape and amount of a window that is shown.\n    Transparent = Set window transparency level.\n    TransColor = Set color that will be invisible inside target window.
WinSet,AlwaysOnTop|Topmost, [State, WinTitle, WinText, NotTitle, NotText]   \nUSE: Forces a window to stay on top of all other windows.\nSTATE: On|Off|Toggle
WinSet,Bottom, [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Send a window to the bottom of the window stack.
WinSet,Top, [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Bring a window to the top of the window stack without activating it.
WinSet,Disable, [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Disable a window.
WinSet,Enable, [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Enables a window.
WinSet,Redraw, [, WinTitle, WinText, NotTitle, NotText]   \nUSE: Redraws a window.
WinSet,Style, N, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Change the style of a window.\nN: A hex style.\n    +|- prefix will add|remove N from current style.\n    ^ prefix will toggle N from current style.\n    Not specifying a prefix will set style equal to N\nErrorLevel: 0 = Success. 1 = Failure.
WinSet,ExStyle, N, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Change the extended style of a window.\nN: A hex style.\n    +|- prefix will add|remove N from current style.\n    ^ prefix will toggle N from current style.\n    Not specifying a prefix will set style equal to N
WinSet,Region, [Options, WinTitle, WinText, NotTitle, NotText]   \nUSE: Change the shape of a window to be the specified rectangle, ellipse, or polygon.\nOPTIONS: Separate options with a space.\n    wN = Width     e = Ellipse              BLANK = Restore to original\n    hN = Height    X-Y = Coordinate pair\n    rN1-N2 = Rectangle corners rounded using ellipses\n        N1 = Ellipse width. N2 = Ellipse height.\n    Polygon = Omit W and H. Use multiple X-Y pairs.\n    Wind = Force polygon to us winding method.\nErrorLevel: 0 = Success. 1 = Failure.
WinSet,Transparent, [N, WinTitle, WinText, NotTitle, NotText]   \nUSE: Set the transparency of a window.\nN: Transparency. 0 .. 255.    OFF = Disable transparency
WinSet,TransColor, Color [Alpha], [WinTitle, WinText, NotTitle, NotText]   \nUSE: Set transparency level for chosen Color.\nCOLOR: RGB hex color or color name. Off = Disable transparency.\nALPHA: Set the alpha for a color. 0 .. 255.\nREMARK: There must be a space between Color and Alpha.\nCHEAT: See Cheat_HTML_Color_Names
WinSetTitle, WinTitle, [WinText], NewTitle, [NotTitle, NotText]   \nWinSetTitle, NewTitle\nWinSetTitle, NewTitle\nUSE: Changes the title of the specified window.\nREMARK: If NewTitle is the only parameter, LastFoundWindow is used.
WinShow, [WinTitle, WinText, NotTitle, NotText]   \nUSE: Unhide the specified window.
WinWait, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Waits until the specified window exists.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds\nErrorLevel: 0 = Success. 1 = Timed out.
WinWaitActive, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Waits until the specified window is active.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds\nErrorLevel: 0 = Success. 1 = Timed out.
WinWaitClose, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Wait until the specified window does not exist.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds\nErrorLevel: 0 = Success. 1 = Timed out.
WinWaitNotActive, [WinTitle, WinText, Wait, NotTitle, NotText]   \nUSE: Waits until the specified window is not active.\nWAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds\nErrorLevel: 0 = Success. 1 = Timed out.

.__Call()   \nUSE: Set a default method to run when the object is called.\nREMARK: Class meta-function. Read the docs for more info.
.__Delete()   \nUSE: This method runs when an object is destroyed.\nREMARK: Class destructor
.__Get()   \nUSE: Default method that runs when an undefined property is requested.\nREMARK: Class meta-function. Read the docs for more info.
.__New()   \nUSE: This method runs when a new object is created.\nREMARK: Class constructor
.__Set()   \nUSE: Default method that runs when an undefined property is set.\nREMARK: Class meta-function. Read the docs for more info.
._NewEnum()   \nUSE: Creates a new enumerator object for enumerating key-value pairs.\nREMARK: This method is usually not called directly. Use a for-loop.
.Bind(Param1, ..., ParamN)   \nUSE: Binds any amount of parameter(s) to a bound func.\nRETURN: Returns a BoundFunc object.\nEX: x:=5, y:=7, fn:=Func("Max").Bind(x, y), fn.Call() ;R=> 7
.Call(Param1, ..., ParamN)   \nUSE: Calls the function.\nREMARK:  %Func%() can be used to call a function by name or reference,\n or to call an object using the __Call meta-function.\n This should be used instead of Func.() wherever possible.\nEX: fn:=Func("Max"), fn.Call(3,7) ;R=> 7
.Clone()   \nUSE: Returns a shallow copy of the object.\nREMARK: A shallow copy means object references will stay the same.\n A 1:1 copy is made if the object is simple and contains no references.\nEX: obj:=[1,2,3], obj2:=obj.Clone() ;R=> obj2 = [1,2,3]
.Close()   \nUSE: Close File, flush data in cache to disk, and release share locks.\nREMARK: Although files are closed automatically when object is freed,\n it is recommended to close the file as soon as possible.\nEX: file.Close()
.Count()   \nUSE: Returns the number of key-value pairs in the object.\nEX: arr:=[1,5,10], arr.Count() ;R=> 3\n obj:={"a":1, "z":1, 1000:1}, obj.Count() ;R=> 3
.Delete(Key)   \nDelete(FirstKey, LastKey)\nUSE: Removes key-value pair(s) from an object.\nKEY: Any single key name.\nFIRSTKEY: First itnteger or string value in the range to remove.\nLASTKEY: An integer or string value greater than FIRSTKEY.\nREMARK: Does not shift array values left to fill removed\n indexes like .RemoveAt() does.\nRETURN: 1 Key R=> Removed value is returned\n Multiple Keys R=> Number of matching keys removed.\nEX: arr:=[1,2,3], arr.Delete(2) ;R=> 2 => arr = [1,,3]\n arr:={A:1,B:2,C:3}, arr.Delete("B") ;R=> "B" => arr = {A:1,C:3}
.GetAddress(Key)   \nUSE: Returns the pointer (address) of the key's string buffer.\nKEY: Any valid key name.\nREMARK: An empty string is returned if KEY value is not a string.\nEX: Obj:={a:"str",b:7}, obj.GetAddress(a) ;R=> 21753843 (pointer)\n Obj:={a:"str",b:7}, obj.GetAddress(b) ;R=> ""
.GetCapacity([key])   \nUSE: Return the capacity of an object or key.\nKEY: Any valid key name. \REMARK: An empty string is returned if KEY not exist or if key's\n value is not string.\nEX: obj.SetCapacity(100), obj.GetCapacity() => 100
.HasKey(Key)   \nUSE: Returns true if key exists in object.\nREMARK: A key value of 0 or a blank string will return true.\n The key:value pair still exists.\n Use .delete() completely removes a key:value pair.\nEX: obj := {"abc":123}, obj.HasKey("abc") ;R=> True\n obj := {"a":12, "b":34}, obj.HasKey("c") ;R=> ""
.InsertAt(Pos, Value1 [, ...ValueN])   \nUSE: Inserts one or more values at a given position within a linear array.\nPOS: Position/index to insert values at.\nVALUE: One or more values.\nREMARK: It's advised to not use this with associative ararys.\nRETURN: None\nEX: arr:=["A","K"], arr.InsertAt(2, "H") => arr = ["A","H","K"]
.IsByRef([PIndex])   \nUSE: Determines if a function has ByRef values or if PIndex is ByRef.\nPINDEX: Function parameter number starting at 1\nREMARK: If no PIndex, returns if function has any ByRef parameters.\nRETURN: No PIndex: 1 = Function has a ByRef param. 0 = No ByRef params.\n With PIndex: 1 = This param is ByRef, 0 = This param is not ByRef\nEX: test(x,ByRef y), fn := Func("test"), fn.IsByRef(2) ;R=> 1
.IsOptional([PIndex])   \nUSE: Check if a function has optional values or if PIndex is optional.\nPINDEX: Function parameter number starting at 1\nREMARK: If no PIndex, returns if function has any ByRef parameters.\nRETURN: No PIndex: 1 = Function has a ByRef param. 0 = No ByRef params.\n With PIndex: 1 = This param is ByRef, 0 = This param is not ByRef\nEX: test(x,ByRef y), fn := Func("test"), fn.IsByRef(2) ;R=> 1
.Length()   \nUSE: Returns the largest integer key.\nREMARK: If no integer keys, returns blank string.\n Length() is the same as MaxIndex()\nEX: arr:=[4,8,9], arr.Length() ;R=> 3\n obj:={-5:1, 0:2, 5:3}, obj.Length() ;R=> 5
.MaxIndex()   \nUSE: Returns the largest integer key.\nREMARK: If no integer keys, returns blank string.\nEX: arr:=[4,8,9], arr.MaxIndex() ;R=> 3\n obj:={"A":1, "Z":2}, obj.MaxIndex() ;R=> ""
.MinIndex()   \nUSE: Returns the lowest integer key.\nREMARK: If no integer keys, returns blank string.\nEX: arr:=[4,8,9], arr.MinIndex() ;R=> 1\n obj:={"A":1, "Z":2}, obj.MinIndex() ;R=> ""
.Pop()   \nUSE: Removes and returns the last array element.\nREMARK: If array is empty, return value is an empty string.\nRETURN: Value of last element removed.\nEX: arr:=["a","b","c"], arr.Pop() ;R=> "c" => arr = ["a","b"]
.Push([Value, ..., ValueN])   \nUSE: Append value to end of array.\nREMARK: The new item's index is always MaxIndex()+1\n Ergo, an index can negative or zero.\n Use Push(arr2*) to push items from one array into another.\nRETURN: The new max index of the array.\nEX: arr:=["a","b"], arr.Push("c") ;R=> 3\n arr:=[1], arr2:=[2,3], arr.Push(arr2*) ;R=> 2 => arr = [1,2,3,4]
.RawRead(VarOrAddress, Bytes)   \nUSE: Read raw binary data from file into memory and advance file pointer.\nVARORADDRESS: Variable or memory address to copy data to.\nBYTES: Maximum number of bytes to read.\nRETURN: Number of bytes that were read.\nEX: file:=FileOpen(path, "r"), file.RawRead(bin_dat, 16)  ;R=> 16
.RawWrite(VarOrAddress, Bytes)   \nUSE: Writes raw binary data to file and advance file pointer.\nVARORADDRESS: Variable or memory address to get binary data from.\nBYTES: Number of bytes to write.\nRETURN: Number of bytes that were written.\nEX: file:=FileOpen(path, "rw"), file.RawWrite(bin_dat, 16)  ;R=> 16
.Read%NumType%()   \nUSE: Reads number from file and advances file pointer.\nNUMTYPE: Types: UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float\nREMARK: Use the correct numtype in the function name.\nRETURN: Number if successful else returns empty string.\nEX: file:=FileOpen(A_ScriptFullPath, "r"), file.ReadFloat() ;R=> 3.14159
.Read([num_of_chars])   \nUSE: Reads string of characters from file and advances file pointer.\nNUM_OF_CHARS: Total number of characters to get from current pointer.\nREMARK: If CHARS is omitted, the reamining text is used.\nEX: file:=FileOpen(A_ScriptFullPath, "r"), file.Read(10) => First 10 chars
.ReadLine()   \nUSE: Reads next line of text from the file and advances the file pointer.\nREMARK: EOL (`n, `r, or `r`n) is selected when making the file object.\n If line exceeds 65,534 chars, that man will be returned. Pointer is set\n at next char instead of advancing to next line.\nRETURN: Line of text\nEX: file:=FileOpen(A_ScriptFullPath, "r"), line:=file.ReadLine()\n ;R=> First line of the script
.RemoveAt(Pos [, Length:=1])   \nUSE: Removes items from the given position in a linear array.\nPOS: Position/index to remove values.\nLENGTH: Number of values to remove after pos.\nREMARK: Remaining items shift left to fill the removed spots.\n It's advised to not use this with associative ararys.\nRETURN: LENGTH = 1 ;R=> Removed value\nLENGTH > 1 ;R=> Number of items removed\nEX: arr:=[1,2,2,2,3], arr.RemoveAt(3,2) => arr = [1,2,3]
.Seek(Distance [, Origin])   \nUSE: Move file pointer.\nDISTANCE: Distance to move, in bytes. Lower = start of file.\nORIGIN: Starting point indicator. 0, 1, or 2\n 0 = SEEK_SET: Beginning of file. Distance must be zero or greater.\n 1 = SEEK_CUR: Current pointer position.\n 2 = SEEK_END: End of file. Distance should usually be negative.\n Omitted and negative distance: SEEK_CUR is used.\n Omitted and positive distance: SEEK_SET is used.\nREMARK: Same as assigning to the File.Position OR File.Pos property\nRETURN: 0 on failure\nEX: file:=FileOpen(path, "rw"), file.Seek(2) ; ;R=> 1 => Move pointer 2 bytes
.SetCapacity(MaxItems)   \nSetCapacity(Key, ByteSize)\nUSE: Adjusts capacity of an object or an object field.\nMAXITEMS: Set's object capacity to hold that many items.\nKEY: Any valid key name.\nBYTESIZE: Number of bytes to set this KEY's string buffer.\n If field not exist, it's created. \REMARK: AHK auto-adjusts object/array sizes automatically when needed.\n This does come at a cost. Pre-allocating size increases performance.\nRETURN: New capacity on success else empty string for failure\nEX: obj.SetCapacity(100) => Can
.Tell()   \nUSE: Return current position of file pointer. 0 marks beginning of file.\nREMARK: Same as the File.Position AND File.Pos property\nEX: file:=FileOpen(path, "rw"), file.Tell() ; ;R=> 0
.Write%NumType%()   \nUSE: Writes number to file and advances file pointer.\nNUMTYPE: Types: UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float\nREMARK: Use the correct numtype in the function name.\nRETURN: Number of bytes written\nEX: file:=FileOpen(A_ScriptFullPath, "r"), file.WriteUInt(7) ;R=> 4 bytes
.Write(String)   \nUSE: Writes string to file and advances file pointer.\nSTRING: Characters to write.\nRETURN: Number of bytes written\nEX: file:=FileOpen(A_ScriptFullPath, "rw"), file.Write(";Hello World!")\n => Writes ";Hello, World!" to script file. Overwrites first 14 chars.
.WriteLine([String])   \nUSE: Write a string of characters followed by EOL and advance file pointer.\nREMARK: EOL (`n, `r, or `r`n) is selected when making the file object.\nRETURN: Number of bytes written to file.\nEX: file:=FileOpen(A_ScriptFullPath, "rw `n"), file.WriteLine(";Hi!")\n => Overwrites first 5 chars of the script with ";Hi!`n"

.__Class   \nUSE: Stores the full name of the class.\nREMARK: Class property \EX: MsgBox, % myclass.__Class
.__Handle   \nUSE: Stores handle to system file. Intended for use with DllCall().\nREMARK: File object property.\n The docs have an example of how to use this.
.AtEOF   \nUSE: 0 if not at end of file else gets set to a non-zero number.\nREMARK: This property should only be used with an actual files.\n Other data sources may not have an EOF marker present.\nEX: MsgBox, % "End of file: " (file.AtEOF ? "true" : "false")
.Base   \nUSE: Retrieves or sets the object's base object.\nREMARK: BaseObject must be an object or an empty string.\nAHK Object property\nEX: BaseObject := Object.Base, Object.Base := BaseObject
.Encoding   \nUSE: Retrieves or sets text Encoding Type used by the file object.\nREMARK: Encoding Type is a numeric code page identifier. Use:\n UTF-8: Equivalent to CP65001\n UTF-16: +Little endian byte order. Equivalent to CP1200.\n CP###: Code page identifier where ### is a number.\nEX: encoding := File.Encoding ;=> Get file's encoding number\n File.Encoding := encoding ;=> Set file's encoding number
.Extra   \nUSE: Additional information about the error, if available.\nREMARK: Exception object property.\nEX: ExObj.Extra ;R=> Any extra info
.File   \nUSE: Full path to the file where the error occurred.\nREMARK: Exception object property.\nCheck the .Line property to see the line the error occurred on.\nEX: ExObj.File ;R=> C:\some\path\to\file.ahk
.IsBuiltIn   \nUSE: Check if function associated with the FuncObject is built-in or not.\nREMARK: FuncObject property.\n 1 = Function is built-in, 0 = Not built-in\nEX: MsgBox, % FuncObj.IsBuiltIn
.IsVariadic   \nUSE: Check if FuncObject has variadic parameters.\nREMARK: FuncObject property.\n 1 = Has variadic params, 0 = No variadic params\nEX: MsgBox, % FuncObj.IsVariadic
.Length   \nUSE: Retrieves or sets File Size.\nREMARK: File Size is always in bytes.\nEX: FileSize := File.Length ;=> Get file's size\n File.Length := FileSize ;=> Set file's size
.Line   \nUSE: Line number where the error occurred.\nREMARK: Exception object property.\nCheck the .file property to see which file the error ocurred in.\nEX: ExObj.Line ;R=> 50
.MaxParams   \nUSE: The total number of associated with funcobject's function.\nREMARK: FuncObject property.\nThe number of required params can be gotten with FuncObj.MinParams\nEX: MsgBox, % "Optional params: " (Fn.MaxParams - Fn.MinParams)
.Message   \nUSE: An error message or ErrorLevel value.\nREMARK: Exception object property.\nEX: ExObj.Message ;R=> Error message
.MinParams   \nUSE: The number of mandatory parameters required for funcobject's function.\nREMARK: FuncObject property.\nTotal params can be gotten with FuncObj.MaxParams\nEX: MsgBox, % "Optional params: " (Fn.MaxParams - Fn.MinParams)
.Name   \nUSE: The function name associated with the FuncObject.\nREMARK: FuncObject property.\nEX: MsgBox, % funcObj.Name
.Pos   \nUSE: Retrieve or set the file pointer.\nREMARK: Synonymous with the .position property.\nEX: file.Pos := num ;=> Same as file.Seek(num)\n num := file.Pos ;=> same as num := file.Tell()
.Position   \nUSE: Retrieve or set the file pointer.\nREMARK: Synonymous with the .pos property.\nEX: file.Position := num ;=> Same as file.Seek(num)\n num := file.Position ;=> same as num := file.Tell()
.What   \nUSE: Name of command/function/label that failed.\nREMARK: Exception object property.\nEX: ExObj.What ;R=> Failed command/func/label

Class   \nUSE: Declare new class\nEX: Class myClass
Extends   \nUSE: Inherit Base Class\nEX: Class myClass Extends anotherClass
Global   \nUSE: Permanent public variable\nEX: Global Var := 0
Local   \nUSE: Temporary private function variable\nEX: Local Var := 0
Static   \nUSE: Permanent private function variable\nEX: Static Var := 0

ByRef   \nUSE: Access variable by address\nEX: Func(ByRef x) ; Changes to var are permanent
New   \nUSE: New item|object\nEX: x := new Class ; Creates a new class object
AND
&&
OR
NOT

A_AhkPath
A_AhkVersion
A_AppData
A_AppDataCommon
A_Args
A_AutoTrim
A_BatchLines
A_CaretX
A_CaretY
A_ComputerName
A_ComSpec
A_ControlDelay
A_CoordModeCaret
A_CoordModeMenu
A_CoordModeMouse
A_CoordModePixel
A_CoordModeToolTip
A_Cursor
A_DD
A_DDD
A_DDDD
A_DefaultGui
A_DefaultListView
A_DefaultMouseSpeed
A_DefaultTreeView
A_Desktop
A_DesktopCommon
A_DetectHiddenText
A_DetectHiddenWindows
A_EndChar
A_EventInfo
A_FileEncoding
A_Gui
A_GuiControl
A_GuiControlEvent
A_GuiEvent
A_GuiHeight
A_GuiWidth
A_GuiX
A_GuiY
A_Hour
A_IconFile
A_IconHidden
A_IconNumber
A_IconTip
A_Index
A_IPAddress1
A_IPAddress2
A_IPAddress3
A_IPAddress4
A_Is64bitOS
A_IsAdmin
A_IsCompiled
A_IsCritical
A_IsPaused
A_IsSuspended
A_IsUnicode
A_KeyDelay
A_KeyDelayPlay
A_KeyDuration
A_KeyDurationPlay
A_Language
A_LastError
A_LineFile
A_LineNumber
A_ListLines
A_LoopField
A_LoopFileAttrib
A_LoopFileDir
A_LoopFileExt
A_LoopFileFullPath
A_LoopFileLongPath
A_LoopFileName
A_LoopFilePath
A_LoopFileShortName
A_LoopFileShortPath
A_LoopFileSize
A_LoopFileSizeKB
A_LoopFileSizeMB
A_LoopFileTimeAccessed
A_LoopFileTimeCreated
A_LoopFileTimeModified
A_LoopReadLine
A_LoopRegKey
A_LoopRegName
A_LoopRegSubKey
A_LoopRegTimeModified
A_LoopRegType
A_MDay
A_Min
A_MM
A_MMM
A_MMMM
A_Mon
A_MouseDelay
A_MouseDelayPlay
A_MSec
A_MyDocuments
A_Now
A_NowUTC
A_NumBatchLines
A_OSType
A_OSVersion
A_PriorHotkey
A_PriorKey
A_ProgramFiles
A_Programs
A_ProgramsCommon
A_PtrSize
A_RegView
A_ScreenDPI
A_ScreenHeight
A_ScreenWidth
A_ScriptDir
A_ScriptFullPath
A_ScriptHWND
A_ScriptName
A_Sec
A_SendLevel
A_SendMode
A_Space
A_StartMenu
A_StartMenuCommon
A_Startup
A_StartupCommon
A_StoreCapsLockMode
A_StringCaseSense
A_Tab
A_Temp
A_ThisFunc
A_ThisHotkey
A_ThisLabel
A_ThisMenu
A_ThisMenuItem
A_ThisMenuItemPos
A_TickCount
A_TimeIdle
A_TimeIdleKeyboard
A_TimeIdleMouse
A_TimeIdlePhysical
A_TimeSincePriorHotkey
A_TimeSinceThisHotkey
A_TitleMatchMode
A_TitleMatchModeSpeed
A_UserName
A_WDay
A_WinDelay
A_WinDir
A_WorkingDir
A_YDay
A_Year
A_YWeek
A_YYYY
Clipboard
ClipboardAll
ComSpec
ErrorLevel
False
ProgramFiles
True

Backspace
BS
Enter
Esc
Escape
Return
Space
Tab

Del
Delete
Down
End
Home
Ins
Insert
Left
PgDn
PgUp
Right
Up

Numpad0
Numpad1
Numpad2
Numpad3
Numpad4
Numpad5
Numpad6
Numpad7
Numpad8
Numpad9
NumpadAdd
NumpadClear
NumpadDel
NumpadDiv
NumpadDot
NumpadDown
NumpadEnd
NumpadEnter
NumpadHome
NumpadIns
NumpadLeft
NumpadMult
NumpadPgDn
NumpadPgUp
NumpadRight
NumpadSub

CapsLock
NumLock
ScrollLock

F1
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
F13
F14
F15
F16
F17
F18
F19
F20
F21
F22
F23
F24

Alt
Control
Ctrl
LAlt
LControl
LCtrl
LShift
LWin
RAlt
RControl
RCtrl
RShift
RWin
Shift

Browser_Back
Browser_Favorites
Browser_Forward
Browser_Home
Browser_Refresh
Browser_Search
Browser_Stop

Volume_Down
Volume_Mute
Volume_Up

AppsKey
Break
CtrlBreak
Help
Pause
PrintScreen
SC
Sleep
VK

Media_Next
Media_Play_Pause
Media_Prev
Media_Stop

Launch_App1
Launch_App2
Launch_Mail
Launch_Media

LButton
MButton
RButton
XButton1
XButton2

WheelDown
WheelLeft
WheelRight
WheelUp

Joy1
Joy2
Joy3
Joy4
Joy5
Joy6
Joy7
Joy8
Joy9
Joy10
Joy11
Joy12
Joy13
Joy14
Joy15
Joy16
Joy17
Joy18
Joy19
Joy20
Joy21
Joy22
Joy23
Joy24
Joy25
Joy26
Joy27
Joy28
Joy29
Joy30
Joy31
Joy32

JoyAxes
JoyButtons
JoyInfo
JoyName
JoyPOV
JoyR
JoyU
JoyV
JoyX
JoyY
JoyZ

AltTab
AltTabMenu
AltTabAndMenu
AltTabMenuDismiss
ShiftAltTab

Abort
AboveNormal
ActiveX
Add
ahk_class
ahk_default
ahk_exe
ahk_group
ahk_id
ahk_parent
ahk_pid
All
AlNum
Alpha
Alt
AltSubmit
AlwaysOn
AlwaysOff
AlwaysOnTop
ANALOG
Aqua
AStr
AtEOF
Auto
AutoHdr
AutoSize
AUX
Background
BackgroundTrans
BarBreak
Base
BASS
BASSBOOST
BelowNormal
Between
Black
Blind
Blue
Bold
Border
Bottom
Break
Buddy
Button
Buttons
Cancel
Capacity
Caption
Caret
Case
CaseLocale
CB
CD
CDecl
Center
Char
Check
Check3
Checkbox
Checked
CheckedGray
Choice
Choose
ChooseString
Class
ClassOverwrite
Click
Client
Close
CLSID
Col
ColClick
Color
Column
Com
ComboBox
Comment
Comments
Contains
Continue
ControlList
ControlListHWND
Count
CP
CSV
CurrentCol
CurrentLine
CW
DateTime
Days
dd
ddd
dddd
DDL
Debug
Default
Delete
DeleteAll
Delimiter
Deref
Desc
Destroy
Digit
DIGITAL
Disable
Disabled
Double
DoubleClick
Down
DownR
DownTemp
DPIScale
DropDownList
Edit
EditPaste
Eject
Enable
Enabled
Encoding
EndChars
EQUALIZER
ErrorStdOut
Event
Exist
Expand
Expanded
ExStyle
extra
Fast
File
Files
FileSystem
FindString
First
Flash
Float
FM
Focus
Focused
FocusV
Font
Force
FS
Fuchsia
Full
GDI+
Get
gg
Gray
Green
Grid
Group
GroupBox
Hdr
HEADPHONES
Hidden
Hide
HideDropDown
High
HKCC
HKCR
HKCU
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKEY_USERS
HKLM
HKU
Horz
Hotkey
Hours
HScroll
HTML
HWND
Icon
IconN
IconRight
IconSmall
ID
IDLast
Ignore
IID
iLib
ImageList
In
Input
InputThenPlay
Insert
Int
Int64
Integer
Interrupt
Invert
Is
IsBuiltIn
IsVariadic
Italic
Join
Label
LastFound
LastFoundExist
Left
Length
Lime
Limit
Line
LineCount
Lines
Link
List
ListBox
ListView
Locale
LocalSameAsGlobal
Lock
Logical
LongDate
LOUDNESS
Low
Lower
Lowercase
LTrim
LV
MainWindow
Margin
Maroon
MASTER
Max
Maximize
MaximizeBox
MaxParams
MaxSize
Menu
Message
MICROPHONE
Middle
Min
Minimize
MinimizeBox
MinMax
MinParams
MinSize
Minutes
MM
MMM
MMMM
Monitor
MonitorCount
MonitorName
MonitorPrimary
MonitorWorkArea
MONO
MonthCal
Mouse
MouseMove
MouseMoveOff
Move
MoveDraw
MsgBox
Multi
MUTE
NA
Name
Navy
New
No
NoActivate
NoDefault
NoHide
NoIcon
NoMainWindow
NoMouse
Norm
NoSort
NoSortHdr
NoStandard
NoTicks
NoTimers
Number
Off
OK
Olive
On
ONOFF
Options
OutputDebug
OwnDialogs
Owner
Page
PAN
Parent
Parse
Password
PCSPEAKER
Permit
Pic
Picture
PID
Pixel
Play
Pos
Position
Priority
ProcessName
ProcessPath
Progress
Ptr
Purple
QSOUNDPAN
Radio
Range
Raw
Read
ReadOnly
RealTime
Red
Redraw
Reg
REG_BINARY
REG_DWORD
REG_EXPAND_SZ
REG_MULTI_SZ
REG_SZ
RegEx
Region
Rel
Relative
Rename
Report
Resize
Restart
Restore
Retry
RGB
Right
RTrim
RunAs*
Screen
Seconds
Section
Select
Selected
Send
SendAndMouse
Serial
Set
Short
Show
ShowDropDown
Silver
Slider
Slow
Smooth
Sort
SortDesc
Space
SPEAKERS
Standard
Status
StatusBar
StatusCD
StdOut
STEREOENH
Str
Strike
Style
Submit
SYNTH
SysMenu
Tab
Tab2
Tab3
TabLeft
TabRight
TabStop
Teal
TELEPHONE
Text
Theme
Thick
ThickInterval
Tile
Time
Timeout
Tip
Toggle
ToggleCheck
ToggleEnable
ToolTip
ToolWindow
Top
Trans
TransColor
Transparent
Tray
TREBLE
TreeView
TryAgain
Type
UChar
UInt
Uncheck
Underline
Uni
Unicode
Unlock
Up
UpDown
Upper
Uppercase
UPtr
UseEnv
UseErrorLevel
UseUnsetGlobal
UseUnsetLocal
UShort
UTF-16
UTF-16-RAW
UTF-8
UTF-8-RAW
Vertical
Vis
VisFirst
Visible
VOL
VOLUME
VScroll
VT_ARRAY
VT_BOOL
VT_BSTR
VT_BYREF
VT_CY
VT_DATE
VT_DECIMAL
VT_DISPATCH
VT_EMPTY
VT_ERROR
VT_I1
VT_I2
VT_I4
VT_I8
VT_INT
VT_NULL
VT_R4
VT_R8
VT_RECORD
VT_UI1
VT_UI2
VT_UI4
VT_UI8
VT_UINT
VT_UNKNOWN
VT_VARIANT
Wait
WaitClose
WantCtrlA
WantF2
WantReturn
WantTab
WAVE
WD
What
WheelDown
WheelLeft
WheelRight
WheelUp
White
Window
WL
WM
WR
Wrap
WS
WStr
WU
x+
X1
X2
xCenter
XDigit
xm
xm+
xp
xp+
xs
xs+
y+
yCenter
Yellow
Yes
ym
ym+
yp
yp+
ys
ys+
yy
yyyy
